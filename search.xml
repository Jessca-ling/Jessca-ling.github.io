<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue2.0</title>
      <link href="/2022/04/21/VUE2.0/"/>
      <url>/2022/04/21/VUE2.0/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-4-21"><a href="#2022-4-21" class="headerlink" title="2022.4.21"></a>2022.4.21</h2><p>· Vue概念：是一套用于构建用户界面的渐进式（Vue可以自底向上逐层的应用）JavaScript框架。尤雨溪</p><p>· Vue特点：1.采用<strong>组件化</strong>（封装好三件套）模式，提高代码复用率、且让代码更好维护。2.<strong>声明式</strong>（不用一步步）编码，让编码人员无需直接操作DOM，提高开发效率。3.使用<strong>虚拟DOM</strong>+优秀的<strong>Diff算法</strong>，尽量复用DOM节点。</p><h2 id="2022-4-22"><a href="#2022-4-22" class="headerlink" title="2022.4.22"></a>2022.4.22</h2><p>· 初识vue：</p><p>​       1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；</p><p>​       2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；</p><p>​       3.root容器里的代码被称为【Vue模板】；</p><p>​       4.Vue实例和容器是一一对应的；</p><p>​       5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6.&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；</span><br></pre></td></tr></table></figure><p>​        7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</p><p>​        注意区分：js表达式 和 js代码(语句)</p><p>​            1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：</p><p>​                  (1). a</p><p>​                  (2). a+b</p><p>​                  (3). demo(1)</p><p>​                  (4). x === y ? ‘a’ : ‘b’         </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.js代码(语句)</span><br><span class="line"></span><br><span class="line">                  (1). if()&#123;&#125;</span><br><span class="line"></span><br><span class="line">                  (2). for()&#123;&#125;</span><br></pre></td></tr></table></figure><p>· Vue模板语法有2大类：</p><p>​          1.插值语法：</p><p>​              功能：用于解析标签体内容。             </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">写法：&#123;&#123;xxx&#125;&#125;，xxx是js表达式，且可以直接读取到data中的所有属性。</span><br></pre></td></tr></table></figure><p>​          2.指令语法：</p><p>​             功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。</p><p>​             举例：v-bind:href=”xxx” 或  简写为 :href=”xxx”，xxx同样要写js表达式，</p><p>​                   且可以直接读取到data中的所有属性。</p><p>​              备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</p><h2 id="2022-4-30"><a href="#2022-4-30" class="headerlink" title="2022.4.30"></a>2022.4.30</h2><p>· Vue中有2种数据绑定的方式：</p><p>​          1.单向绑定(v-bind)：数据只能从data流向页面。</p><p>​          2.双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。</p><p>​            备注：</p><p>​                1.双向绑定一般都应用在表单类元素上（如：input、select等）</p><p>​                2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</p><p>-》》写法 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单向数据绑定：</span><br><span class="line">&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line"> 双向数据绑定：</span><br><span class="line"> &lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">  &lt;!-- 简写 --&gt;</span><br><span class="line"> 单向数据绑定：&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line"> 双向数据绑定：&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上 --&gt;</span><br><span class="line">    &lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt; </span><br></pre></td></tr></table></figure><p>· el与data的俩种写法：</p><p>​        1.el有2种写法</p><p>​                  (1).new Vue时候配置el属性。</p><p>​                  (2).先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</p><p>​         2.data有2种写法</p><p>​                  (1).对象式</p><p>​                  (2).函数式</p><p>​                  如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</p><p>​          3.一个重要的原则：</p><p>​                 由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。    </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//el的两种写法</span><br><span class="line"> const v = new Vue(&#123;</span><br><span class="line">//el:&#x27;#root&#x27;, //第一种写法</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(v)</span><br><span class="line">v.$mount(&#x27;#root&#x27;) //第二种写法 </span><br><span class="line"></span><br><span class="line">//data的两种写法</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">//data的第一种写法：对象式</span><br><span class="line"> data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">//data的第二种写法：函数式</span><br><span class="line">data()&#123;</span><br><span class="line">console.log(&#x27;@@@&#x27;,this) //此处的this是Vue实例对象</span><br><span class="line">return&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>· MVVM模型：1. M：模型(Model) ：data中的数据</p><p>​            2. V：视图(View) ：模板代码</p><p>​            3. VM：视图模型(ViewModel)：Vue实例</p><p><a href="https://imgtu.com/i/OFEjkq"><img src="https://s1.ax1x.com/2022/05/02/OFEjkq.png" alt="OFEjkq.png"></a></p><p>​      观察发现：</p><p>​            1.data中所有的属性，最后都出现在了vm身上。</p><p>​            2.vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</p><h2 id="2022-5-1"><a href="#2022-5-1" class="headerlink" title="2022.5.1"></a>2022.5.1</h2><p>· 回顾Object.defineproperty方法：</p><p><code>**Object.defineProperty()**</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p><p><strong>备注：</strong>应当直接在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a> 构造器对象上调用此方法，而不是在任意一个 <code>Object</code> 类型的实例上调用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.defineProperty(person,&#x27;age&#x27;,&#123;</span><br><span class="line">// value:18,</span><br><span class="line">// enumerable:true, //控制属性是否可以枚举，默认值是false</span><br><span class="line">// writable:true, //控制属性是否可以被修改，默认值是false</span><br><span class="line">// configurable:true //控制属性是否可以被删除，默认值是false</span><br><span class="line"></span><br><span class="line">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span><br><span class="line">get()&#123;</span><br><span class="line">console.log(&#x27;有人读取age属性了&#x27;)</span><br><span class="line">return number</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span><br><span class="line">set(value)&#123;</span><br><span class="line">console.log(&#x27;有人修改了age属性，且值是&#x27;,value)</span><br><span class="line">number = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// console.log(Object.keys(person))</span><br><span class="line"></span><br><span class="line">console.log(person)</span><br></pre></td></tr></table></figure><p>· 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）</p><p>​        1.Vue中的数据代理：</p><p>​             通过vm对象来代理data对象中属性的操作（读/写）</p><p>​        2.Vue中数据代理的好处：</p><p>​             更加方便的操作data中的数据</p><p>​        3.基本原理：</p><p>​              通过Object.defineProperty()把data对象中所有属性添加到vm上。</p><p>​              为每一个添加到vm上的属性，都指定一个getter/setter。</p><p>​              在getter/setter内部去操作（读/写）data中对应的属性。</p><p><a href="https://imgtu.com/i/OFEvt0"><img src="https://s1.ax1x.com/2022/05/02/OFEvt0.png" alt="OFEvt0.png"></a></p><p>· 事件的基本使用：</p><p>​              1.使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；</p><p>​              2.事件的回调需要配置在methods对象中，最终会在vm上；</p><p>​              3.methods中配置的函数，不要用箭头函数！否则this就不是vm了；</p><p>​              4.methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；</p><p>​              5.@click=”demo” 和 @click=”demo($event)” 效果一致，但后者可以传参；</p><p>·         Vue中的事件修饰符：</p><p>​            1.prevent：阻止默认事件（常用）；</p><p>​            2.stop：阻止事件冒泡（常用）；</p><p>​            3.once：事件只触发一次（常用）；</p><p>​            4.capture：使用事件的捕获模式；</p><p>​            5.self：只有event.target是当前操作的元素时才触发事件；</p><p>​            6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 阻止默认事件（常用） --&gt;</span><br><span class="line">&lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 阻止事件冒泡（常用） --&gt;</span><br><span class="line">&lt;div class=&quot;demo1&quot; @click=&quot;showInfo&quot;&gt;</span><br><span class="line">&lt;button @click.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">&lt;!-- 修饰符可以连续写 --&gt;</span><br><span class="line">&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 事件只触发一次（常用） --&gt;</span><br><span class="line">&lt;button @click.once=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用事件的捕获模式 --&gt;</span><br><span class="line">&lt;div class=&quot;box1&quot; @click.capture=&quot;showMsg(1)&quot;&gt;</span><br><span class="line">div1</span><br><span class="line">&lt;div class=&quot;box2&quot; @click=&quot;showMsg(2)&quot;&gt;</span><br><span class="line">div2</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span><br><span class="line">&lt;div class=&quot;demo1&quot; @click.self=&quot;showInfo&quot;&gt;</span><br><span class="line">&lt;button @click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span><br><span class="line">&lt;ul @wheel.passive=&quot;demo&quot; class=&quot;list&quot;&gt;</span><br><span class="line">&lt;li&gt;1&lt;/li&gt;</span><br><span class="line">&lt;li&gt;2&lt;/li&gt;</span><br><span class="line">&lt;li&gt;3&lt;/li&gt;</span><br><span class="line">&lt;li&gt;4&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>· 键盘事件：1.Vue中常用的按键别名：</p><p>​              回车 =&gt; enter</p><p>​              删除 =&gt; delete (捕获“删除”和“退格”键)</p><p>​              退出 =&gt; esc</p><p>​              空格 =&gt; space</p><p>​              换行 =&gt; tab (特殊，必须配合keydown去使用)</p><p>​              上 =&gt; up</p><p>​              下 =&gt; down</p><p>​              左 =&gt; left</p><p>​              右 =&gt; right</p><p>​        2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</p><p>​        3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</p><p>​              (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</p><p>​              (2).配合keydown使用：正常触发事件。</p><p>​        4.也可以使用keyCode去指定具体的按键（不推荐）</p><p>​        5.Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</p><p><strong>注意：1.修饰符可以连续写</strong>         </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; </span><br></pre></td></tr></table></figure><p>·  计算属性：</p><p>​          1.定义：要用的属性不存在，要通过已有属性计算得来。</p><p>​          2.原理：底层借助了Objcet.defineproperty方法提供的getter和setter。</p><p>​          3.get函数什么时候执行？</p><p>​                (1).初次读取时会执行一次。</p><p>​                (2).当依赖的数据发生改变时会被再次调用。</p><p>​          4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。</p><p>​          5.备注：</p><p>​              1.计算属性最终会出现在vm上，直接读取使用即可。</p><p>​              2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">//完整写法</span><br><span class="line">/* fullName:&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">console.log(&#x27;get被调用了&#x27;)</span><br><span class="line">return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;,</span><br><span class="line">set(value)&#123;</span><br><span class="line">console.log(&#x27;set&#x27;,value)</span><br><span class="line">const arr = value.split(&#x27;-&#x27;)</span><br><span class="line">this.firstName = arr[0]</span><br><span class="line">this.lastName = arr[1]</span><br><span class="line">&#125;</span><br><span class="line">&#125; */</span><br><span class="line">//简写，只有考虑读取，不考虑修改才能简写</span><br><span class="line">fullName()&#123;</span><br><span class="line">console.log(&#x27;get被调用了&#x27;)</span><br><span class="line">return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2022-5-2"><a href="#2022-5-2" class="headerlink" title="2022.5.2"></a>2022.5.2</h2><p>· 监视属性watch：</p><p>​          1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作</p><p>​          2.监视的属性必须存在，才能进行监视！！</p><p>​          3.监视的两种写法：</p><p>​              (1).new Vue时传入watch配置</p><p>​              (2).通过vm.$watch监视</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* watch:&#123;</span><br><span class="line">isHot:&#123;</span><br><span class="line">immediate:true, //初始化时让handler调用一下</span><br><span class="line">//handler什么时候调用？当isHot发生改变时。</span><br><span class="line">handler(newValue,oldValue)&#123;</span><br><span class="line">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; */</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$watch(&#x27;isHot&#x27;,&#123;</span><br><span class="line">immediate:true, //初始化时让handler调用一下</span><br><span class="line">//handler什么时候调用？当isHot发生改变时。</span><br><span class="line">handler(newValue,oldValue)&#123;</span><br><span class="line">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watch:&#123;</span><br><span class="line">//正常写法</span><br><span class="line">/* isHot:&#123;</span><br><span class="line">// immediate:true, //初始化时让handler调用一下</span><br><span class="line">// deep:true,//深度监视</span><br><span class="line">handler(newValue,oldValue)&#123;</span><br><span class="line">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, */</span><br><span class="line">//简写</span><br><span class="line">/* isHot(newValue,oldValue)&#123;</span><br><span class="line">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span><br><span class="line">&#125; */</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//正常写法</span><br><span class="line">/* vm.$watch(&#x27;isHot&#x27;,&#123;</span><br><span class="line">immediate:true, //初始化时让handler调用一下</span><br><span class="line">deep:true,//深度监视</span><br><span class="line">handler(newValue,oldValue)&#123;</span><br><span class="line">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;) */</span><br><span class="line"></span><br><span class="line">//简写</span><br><span class="line">/* vm.$watch(&#x27;isHot&#x27;,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span><br><span class="line">&#125;) */</span><br></pre></td></tr></table></figure><p>· 深度监视：</p><p>​            (1).Vue中的watch默认不监测对象内部值的改变（一层）。</p><p>​            (2).配置deep:true可以监测对象内部值改变（多层）。</p><p>​        备注：</p><p>​            (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</p><p>​            (2).使用watch时根据数据的具体结构，决定是否采用深度监视。   </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">isHot:&#123;</span><br><span class="line">// immediate:true, //初始化时让handler调用一下</span><br><span class="line">//handler什么时候调用？当isHot发生改变时。</span><br><span class="line">handler(newValue,oldValue)&#123;</span><br><span class="line">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">//监视多级结构中某个属性的变化</span><br><span class="line">/* &#x27;numbers.a&#x27;:&#123;</span><br><span class="line">handler()&#123;</span><br><span class="line">console.log(&#x27;a被改变了&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125; */</span><br><span class="line">//监视多级结构中所有属性的变化</span><br><span class="line">numbers:&#123;</span><br><span class="line">deep:true,</span><br><span class="line">handler()&#123;</span><br><span class="line">console.log(&#x27;numbers改变了&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>· computed和watch之间的区别：</p><p>​            1.computed能完成的功能，watch都可以完成。</p><p>​            2.watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</p><p>​    两个重要的小原则：</p><p>​              1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</p><p>​              2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，  这样this的指向才是vm 或 组件实例对象。</p><h2 id="2022-5-3"><a href="#2022-5-3" class="headerlink" title="2022.5.3"></a>2022.5.3</h2><p>· 绑定样式：</p><p>​          1. class样式</p><p>​               写法:class=”xxx” xxx可以是字符串、对象、数组。</p><p>​                    字符串写法适用于：类名不确定，要动态获取。</p><p>​                    对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</p><p>​                   数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</p><p>​         2. style样式</p><p>​                :style=”{fontSize: xxx}”其中xxx是动态值。</p><p>​               :style=”[a,b]”其中a、b是样式对象。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定style样式--对象写法 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;!-- 绑定style样式--数组写法 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="2022-5-4"><a href="#2022-5-4" class="headerlink" title="2022.5.4"></a>2022.5.4</h2><p>· 条件渲染：</p><p>​              1.v-if</p><p>​                    写法：</p><p>​                        (1).v-if=”表达式” </p><p>​                        (2).v-else-if=”表达式”</p><p>​                        (3).v-else=”表达式”</p><p>​                    适用于：切换频率较低的场景。</p><p>​                    特点：不展示的DOM元素直接被移除。</p><p>​                    注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</p><p>​              2.v-show</p><p>​                    写法：v-show=”表达式”</p><p>​                    适用于：切换频率较高的场景。</p><p>​                    特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p><p>​                </p><p>​              3.备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</p><p>​     </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;!-- 使用v-show做条件渲染 --&gt;</span><br><span class="line">&lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line">&lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用v-if做条件渲染 --&gt;</span><br><span class="line">&lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line">&lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-else和v-else-if --&gt;</span><br><span class="line">&lt;!-- &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-if与template的配合使用 --&gt;</span><br><span class="line">&lt;template v-if=&quot;n === 1&quot;&gt;</span><br><span class="line">&lt;h2&gt;你好&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;尚硅谷&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;北京&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2022-5-5"><a href="#2022-5-5" class="headerlink" title="2022.5.5"></a>2022.5.5</h2><p>· 基本列表：v-for指令:</p><p>​            1.用于展示列表数据</p><p>​            2.语法：v-for=”(item, index) in xxx” :key=”yyy”</p><p>​            3.可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 遍历数组 --&gt;</span><br><span class="line">&lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历对象 --&gt;</span><br><span class="line">&lt;h2&gt;汽车信息（遍历对象）&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(value,k) of car&quot; :key=&quot;k&quot;&gt;</span><br><span class="line">&#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历字符串 --&gt;</span><br><span class="line">&lt;h2&gt;测试遍历字符串（用得少）&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(char,index) of str&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历指定次数 --&gt;</span><br><span class="line">&lt;h2&gt;测试遍历指定次数（用得少）&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(number,index) of 5&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>·         <strong>面试题：react、vue中的key有什么作用？（key的内部原理）</strong></p><p>​           1. 虚拟DOM中key的作用：</p><p>​                    key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, </p><p>​                    随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：             </p><p>​            2.对比规则：</p><p>​                  (1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</p><p>​                        ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</p><p>​                        ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</p><p>​                  (2).旧虚拟DOM中未找到与新虚拟DOM相同的key</p><p>​                        创建新的真实DOM，随后渲染到到页面。                    </p><p>​            3. 用index作为key可能会引发的问题：</p><p>​                      1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</p><p>​                              会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</p><p>​                      2. 如果结构中还包含输入类的DOM：</p><p>​                              会产生错误DOM更新 ==&gt; 界面有问题。</p><p>​            4. 开发中如何选择key?:</p><p>​                      1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号<strong>等唯一值</strong>。</p><p>​                      2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，</p><p>​                        使用index作为key是没有问题的。</p><p><a href="https://imgtu.com/i/OuvkTA"><img src="https://s1.ax1x.com/2022/05/06/OuvkTA.png" alt="OuvkTA.png"></a></p><p> · 列表过滤：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//用watch实现</span><br><span class="line">//#region </span><br><span class="line">/* new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">keyWord:&#x27;&#x27;,</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span><br><span class="line">],</span><br><span class="line">filPerons:[]</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">keyWord:&#123;</span><br><span class="line">immediate:true,</span><br><span class="line">handler(val)&#123;</span><br><span class="line">this.filPerons = this.persons.filter((p)=&gt;&#123;</span><br><span class="line">return p.name.indexOf(val) !== -1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) */</span><br><span class="line">//#endregion</span><br><span class="line"></span><br><span class="line">//用computed实现</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">keyWord:&#x27;&#x27;,</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">filPerons()&#123;</span><br><span class="line">return this.persons.filter((p)=&gt;&#123;</span><br><span class="line">return p.name.indexOf(this.keyWord) !== -1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>· 列表排序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">filPerons()&#123;</span><br><span class="line">const arr = this.persons.filter((p)=&gt;&#123;</span><br><span class="line">return p.name.indexOf(this.keyWord) !== -1</span><br><span class="line">&#125;)</span><br><span class="line">//判断一下是否需要排序</span><br><span class="line">if(this.sortType)&#123;</span><br><span class="line">arr.sort((p1,p2)=&gt;&#123;</span><br><span class="line">return this.sortType === 1 ? p2.age-p1.age : p1.age-p2.age</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">return arr</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2022-5-6"><a href="#2022-5-6" class="headerlink" title="2022.5.6"></a>2022.5.6</h2><p>· Vue监测数据的原理——对象：（</p><p>）</p><p>· Vue监测数据的原理——数组：（</p><p>）</p><p>· <strong>总结vue监测数据的原理：</strong></p><p>​        1. vue会监视data中所有层次的数据。</p><p>​        2. 如何监测对象中的数据？</p><p>​                通过setter实现监视，且要在new Vue时就传入要监测的数据。</p><p>​                  (1).对象中后追加的属性，Vue默认不做响应式处理</p><p>​                  (2).如需给后添加的属性做响应式，请使用如下API：</p><p>​                          Vue.set(target，propertyName/index，value) 或 </p><p>​                          vm.$set(target，propertyName/index，value)</p><p>​        3. 如何监测数组中的数据？</p><p>​                  通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><p>​                    (1).调用原生对应的方法对数组进行更新。</p><p>​                    (2).重新解析模板，进而更新页面。</p><p>​        4.在Vue修改数组中的某个元素一定要用如下方法：</p><p>​              1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</p><p>​              2.Vue.set() 或 vm.$set()</p><p>​        特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</p><h2 id="2022-5-7"><a href="#2022-5-7" class="headerlink" title="2022.5.7"></a>2022.5.7</h2><p>· 收集表单数据：   </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若：&lt;input type=&quot;text&quot;/&gt;，则v-model收集的是value值，用户输入的就是value值。</span><br><span class="line"></span><br><span class="line">        若：&lt;input type=&quot;radio&quot;/&gt;，则v-model收集的是value值，且要给标签配置value值。</span><br><span class="line"></span><br><span class="line">        若：&lt;input type=&quot;checkbox&quot;/&gt;</span><br><span class="line"></span><br><span class="line">            1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</span><br><span class="line"></span><br><span class="line">            2.配置input的value属性:</span><br><span class="line"></span><br><span class="line">                (1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</span><br><span class="line"></span><br><span class="line">                (2)v-model的初始值是数组，那么收集的的就是value组成的数组</span><br><span class="line"></span><br><span class="line">        备注：v-model的三个修饰符：</span><br><span class="line"></span><br><span class="line">                lazy：失去焦点再收集数据</span><br><span class="line"></span><br><span class="line">                number：输入字符串转为有效的数字</span><br><span class="line"></span><br><span class="line">                trim：输入首尾空格过滤</span><br></pre></td></tr></table></figure><h2 id="2022-5-8"><a href="#2022-5-8" class="headerlink" title="2022.5.8"></a>2022.5.8</h2><p>· 过滤器：<strong>有全局和局部的</strong></p><p>​        定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</p><p>​        语法：          </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.注册过滤器：Vue.filter(name,callback) 或 new Vue&#123;filters:&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">2.使用过滤器：&#123;&#123; xxx | 过滤器名&#125;&#125;  或  v-bind:属性 = &quot;xxx | 过滤器名&quot;</span><br></pre></td></tr></table></figure><p>​        备注：</p><p>​            1.过滤器也可以接收额外参数、多个过滤器也可以串联</p><p>​           2.并没有改变原本的数据, 是产生新的对应的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 计算属性实现 --&gt;</span><br><span class="line">&lt;h3&gt;现在是：&#123;&#123;fmtTime&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;!-- methods实现 --&gt;</span><br><span class="line">&lt;h3&gt;现在是：&#123;&#123;getFmtTime()&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;!-- 过滤器实现 --&gt;</span><br><span class="line">&lt;h3&gt;现在是：&#123;&#123;time | timeFormater&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;!-- 过滤器实现（传参） --&gt;</span><br><span class="line">&lt;h3&gt;现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3 :x=&quot;msg | mySlice&quot;&gt;尚硅谷&lt;/h3&gt;</span><br></pre></td></tr></table></figure><h2 id="2022-5-9"><a href="#2022-5-9" class="headerlink" title="2022.5.9"></a>2022.5.9</h2><h5 id="内置指令："><a href="#内置指令：" class="headerlink" title="内置指令："></a>内置指令：</h5><h5 id="我们学过的指令："><a href="#我们学过的指令：" class="headerlink" title="我们学过的指令："></a>我们学过的指令：</h5><p>​            v-bind  : 单向绑定解析表达式, 可简写为 :xxx</p><p>​            v-model : 双向数据绑定</p><p>​            v-for  : 遍历数组/对象/字符串</p><p>​            v-on   : 绑定事件监听, 可简写为@</p><p>​            v-if     : 条件渲染（动态控制节点是否存存在）</p><p>​            v-else  : 条件渲染（动态控制节点是否存存在）</p><p>​            v-show  : 条件渲染 (动态控制节点是否展示)</p><p> ·    v-text指令：</p><p>​            1.作用：向其所在的节点中渲染文本内容。</p><p>​            2.与插值语法的区别：v-text会替换掉节点中的内容，则不会。</p><p>·   v-html指令：（Cookie（储存在用户本地终端上的数据）类型为“<strong>小型文本文件</strong>”，是某些网站为了辨别用户身份，进行<a href="https://baike.baidu.com/item/Session/479100">Session</a>跟踪而储存在用户本地终端上的数据（通常经过加密），由用户<a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF/101081">客户端</a>计算机暂时或永久保存的信息 。）</p><p>​            1.作用：向指定节点中渲染包含html结构的内容。</p><p>​            2.与插值语法的区别：</p><p>​                  (1).v-html会替换掉节点中所有的内容，则不会。</p><p>​                  (2).v-html可以识别html结构。</p><p>​            3.严重注意：v-html有安全性问题！！！！</p><p>​                  (1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。</p><p>​                  (2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</p><p>   · v-cloak指令（没有值）：</p><p>​            1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</p><p>​            2.使用css配合v-cloak可以解决网速慢时页面展示出的问题。</p><p>  · v-once指令：</p><p>​            1.v-once所在节点在初次动态渲染后，就视为静态内容了。</p><p>​            2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</p><p>  · v-pre指令：</p><p>​          1.跳过其所在节点的编译过程。</p><p>​          2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</p><h2 id="2022-5-17"><a href="#2022-5-17" class="headerlink" title="2022.5.17"></a>2022.5.17</h2><p>· 自定义指令：  </p><p>​       需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</p><p>​        需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</p><p>​        自定义指令总结：</p><p>​            一、定义语法：</p><p>​                  (1).局部指令：</p><p>​                        new Vue({                              new Vue({</p><p>​                          directives:{指令名:配置对象}  或      directives{指令名:回调函数}</p><p>​                        })                                    })</p><p>​                  (2).全局指令：</p><p>​                         Vue.directive(指令名,配置对象) 或  Vue.directive(指令名,回调函数)</p><p>​            二、配置对象中常用的3个回调：</p><p>​                  (1).bind：指令与元素成功绑定时调用。</p><p>​                  (2).inserted：指令所在元素被插入页面时调用。</p><p>​                  (3).update：指令所在模板结构被重新解析时调用。</p><p>​            三、备注：</p><p>​                  1.指令定义时不加v-，但使用时要加v-；</p><p>​                  2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</p><p>​    </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//定义全局指令</span><br><span class="line">/* Vue.directive(&#x27;fbind&#x27;,&#123;</span><br><span class="line">//指令与元素成功绑定时（一上来）</span><br><span class="line">bind(element,binding)&#123;</span><br><span class="line">element.value = binding.value</span><br><span class="line">&#125;,</span><br><span class="line">//指令所在元素被插入页面时</span><br><span class="line">inserted(element,binding)&#123;</span><br><span class="line">element.focus()</span><br><span class="line">&#125;,</span><br><span class="line">//指令所在的模板被重新解析时</span><br><span class="line">update(element,binding)&#123;</span><br><span class="line">element.value = binding.value</span><br><span class="line">&#125;</span><br><span class="line">&#125;) */</span><br><span class="line"></span><br><span class="line">directives:&#123;</span><br><span class="line">//big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。</span><br><span class="line">/* &#x27;big-number&#x27;(element,binding)&#123;</span><br><span class="line">// console.log(&#x27;big&#x27;)</span><br><span class="line">element.innerText = binding.value * 10</span><br><span class="line">&#125;, */</span><br><span class="line">big(element,binding)&#123;</span><br><span class="line">console.log(&#x27;big&#x27;,this) //注意此处的this是window</span><br><span class="line">// console.log(&#x27;big&#x27;)</span><br><span class="line">element.innerText = binding.value * 10</span><br><span class="line">&#125;,</span><br><span class="line">fbind:&#123;</span><br><span class="line">//指令与元素成功绑定时（一上来）</span><br><span class="line">bind(element,binding)&#123;</span><br><span class="line">element.value = binding.value</span><br><span class="line">&#125;,</span><br><span class="line">//指令所在元素被插入页面时</span><br><span class="line">inserted(element,binding)&#123;</span><br><span class="line">element.focus()</span><br><span class="line">&#125;,</span><br><span class="line">//指令所在的模板被重新解析时</span><br><span class="line">update(element,binding)&#123;</span><br><span class="line">element.value = binding.value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2022-5-18"><a href="#2022-5-18" class="headerlink" title="2022.5.18"></a>2022.5.18</h2><p>·         生命周期：</p><p><a href="https://imgtu.com/i/OvWsMR"><img src="https://s1.ax1x.com/2022/05/22/OvWsMR.png" alt="OvWsMR.png"></a></p><p>​           1.又名：生命周期回调函数、生命周期函数、生命周期钩子。</p><p>​           2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</p><p>​           3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</p><p>​           4.生命周期函数中的this指向是vm 或 组件实例对象。</p><p>·        常用的生命周期钩子：</p><p>​            1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</p><p>​            2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</p><p> ·       关于销毁Vue实例</p><p>​            1.销毁后借助Vue开发者工具看不到任何信息。</p><p>​            2.销毁后自定义事件会失效，但原生DOM事件依然有效。</p><p>​            3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</p><h2 id="2022-5-19"><a href="#2022-5-19" class="headerlink" title="2022.5.19"></a>2022.5.19</h2><p><a href="https://imgtu.com/i/OvWgZ6"><img src="https://s1.ax1x.com/2022/05/22/OvWgZ6.png" alt="OvWgZ6.png"></a></p><p>·Vue中使用组件的三大步骤：</p><p>​          一、定义组件(创建组件)</p><p>​          二、注册组件</p><p>​          三、使用组件(写组件标签)</p><p>​      一、如何定义一个组件？</p><p>​            使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；</p><p>​            区别如下：</p><p>​                1.el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</p><p>​                2.data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。</p><p>​           备注：使用template可以配置组件结构。</p><p>​      二、如何注册组件？</p><p>​              1.局部注册：靠new Vue的时候传入components选项</p><p>​              2.全局注册：靠Vue.component(‘组件名’,组件)</p><p>​      三、编写组件标签：      </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;school&gt;&lt;/school&gt;</span><br></pre></td></tr></table></figure><p>· 几个注意点：</p><p>​          1.关于组件名:</p><p>​                一个单词组成：</p><p>​                      第一种写法(首字母小写)：school</p><p>​                      第二种写法(首字母大写)：School</p><p>​               多个单词组成：</p><p>​                      第一种写法(kebab-case命名)：my-school</p><p>​                      第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</p><p>​                备注：</p><p>​                   (1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</p><p>​                   (2).可以使用name配置项指定组件在开发者工具中呈现的名字。</p><p>​        </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.关于组件标签:</span><br><span class="line">              第一种写法：&lt;school&gt;&lt;/school&gt;</span><br><span class="line"></span><br><span class="line">              第二种写法：&lt;school/&gt;</span><br><span class="line"></span><br><span class="line">              备注：不用使用脚手架时，&lt;school/&gt;会导致后续组件不能渲染。</span><br></pre></td></tr></table></figure><p>​          3.一个简写方式：</p><p>​                const school = Vue.extend(options) 可简写为：const school = options</p><h2 id="2022-5-20"><a href="#2022-5-20" class="headerlink" title="2022.5.20"></a>2022.5.20</h2><p>· 关于VueComponent：</p><p>​            1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</p><p>​           </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.我们只需要写&lt;school/&gt;或&lt;school&gt;&lt;/school&gt;，Vue解析时会帮我们创建school组件的实例对象，</span><br><span class="line"></span><br><span class="line">             即Vue帮我们执行的：new VueComponent(options)。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            3.特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！</p><p>​            4.关于this指向：</p><p>​                (1).组件配置中：</p><p>​                      data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</p><p>​                (2).new Vue(options)配置中：</p><p>​                      data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</p><p>​            5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。</p><p>​              Vue的实例对象，以后简称vm。</p><p>   <strong>&lt;!–</strong> </p><p>​        <strong>1.一个重要的内置关系：VueComponent.prototype.proto === Vue.prototype</strong></p><p>​        <strong>2.为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</strong></p><p>​    <strong>–&gt;</strong></p><p><a href="https://imgtu.com/i/OvWys1"><img src="https://s1.ax1x.com/2022/05/22/OvWys1.png" alt="OvWys1.png"></a></p><h2 id="2022-5-21"><a href="#2022-5-21" class="headerlink" title="2022.5.21"></a>2022.5.21</h2><p>· 单文件组件：以.vue结尾的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--组件的结构--&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//组件交互相关的代码（数据、方法等等）</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 组件的样式*/</span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure><h2 id="2022-5-22"><a href="#2022-5-22" class="headerlink" title="2022.5.22"></a>2022.5.22</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;放在之间的是文本类型(text)。javascript是告诉浏览器里面的文本是属于javascript脚本。</span><br></pre></td></tr></table></figure><p><img src="https://img.gejiba.com/images/ac2fc42dc01593458368b3e32705a58e.png" alt="ac2fc42dc01593458368b3e32705a58e.png"></p><h2 id="2022-5-23"><a href="#2022-5-23" class="headerlink" title="2022.5.23"></a>2022.5.23</h2><p>· 初始化脚手架 （ 1.Vue 脚手架是 Vue 官方提供的标准化开发工具（开发平台）。 2. 最新的版本是 4.x。 3. 文档: <a href="https://cli.vuejs.org/zh/%E3%80%82">https://cli.vuejs.org/zh/。</a> )</p><p>​    第一步（仅第一次执行）：全局安装@vue/cli。 npm install -g @vue/cli </p><p>​    第二步：切换到你要创建项目的目录，然后使用命令创建项目 vue create xxxx</p><p>​     第三步：启动项目 npm run serve</p><p><strong>脚手架文件结构</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line"></span><br><span class="line">├── public</span><br><span class="line"></span><br><span class="line">│  ├── favicon.ico: 页签图标</span><br><span class="line"></span><br><span class="line">│  └── index.html: 主页面</span><br><span class="line"></span><br><span class="line">├── src</span><br><span class="line"></span><br><span class="line">│  ├── assets: 存放静态资源</span><br><span class="line"></span><br><span class="line">│  │  └── logo.png</span><br><span class="line"></span><br><span class="line">│  │── component: 存放组件</span><br><span class="line"></span><br><span class="line">│  │  └── HelloWorld.vue</span><br><span class="line"></span><br><span class="line">│  │── App.vue: 汇总所有组件</span><br><span class="line"></span><br><span class="line">│  │── main.js: 入口文件</span><br><span class="line"></span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line"></span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line"></span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line"></span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line"></span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h2 id="2022-5-24"><a href="#2022-5-24" class="headerlink" title="2022.5.24"></a>2022.5.24</h2><p>· main.js中的render函数：在精简版的vue里，作模板解析器，减少代码量</p><p>·  关于不同版本的Vue：</p><p>​    1.vue.js与vue.runtime.xxx.js的区别：</p><p>​        (1).vue.js是完整版的Vue，包含：核心功能+模板解析器。</p><p>​        (2).vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</p><p>​    2.因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，<strong>需要使用</strong></p><p>​      <strong>render函数接收到的createElement函数去指定具体内容。</strong></p><p>· vue.config.js配置文件（有些默认配置最好不要改）</p><ol><li><p>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</p></li><li><p>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></p></li></ol><h2 id="2022-5-25"><a href="#2022-5-25" class="headerlink" title="2022.5.25"></a>2022.5.25</h2><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><ol><li><p>被用来给元素或子组件注册引用信息（id的替代者）</p></li><li><p>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</p></li><li><p>使用方式：</p></li><li><p>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></p></li><li><p>获取：<code>this.$refs.xxx</code></p></li></ol><h3 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h3><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p></li><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line"></span><br><span class="line"> <span class="attr">name</span>:&#123;</span><br><span class="line"></span><br><span class="line"> <span class="attr">type</span>:<span class="built_in">String</span>, <span class="comment">//类型</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p><h2 id="2022-5-26"><a href="#2022-5-26" class="headerlink" title="2022.5.26"></a>2022.5.26</h2><h4 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h4><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p></li></ol><p>  第一步定义混合：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> data()&#123;....&#125;,</span><br><span class="line"></span><br><span class="line"> methods:&#123;....&#125;</span><br><span class="line"></span><br><span class="line"> ....</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  第二步使用混入：</p><p>   全局混入：<code>Vue.mixin(xxx)</code></p><p>   局部混入：<code>mixins:[&#39;xxx&#39;]  </code></p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">对象.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line"></span><br><span class="line">  Vue.filter(....)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局指令</span></span><br><span class="line"></span><br><span class="line">  Vue.directive(....)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line"></span><br><span class="line">  Vue.mixin(....)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line"></span><br><span class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$myProperty = xxxx</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>使用插件：<code>Vue.use()</code></li></ol><h4 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h4><ol><li><p>作用：让样式在局部生效，防止冲突。</p></li><li><p>写法：<code>&lt;style scoped&gt;</code></p></li></ol><h2 id="2022-5-27"><a href="#2022-5-27" class="headerlink" title="2022.5.27"></a>2022.5.27</h2><h4 id="scoped样式-1"><a href="#scoped样式-1" class="headerlink" title="scoped样式"></a>scoped样式</h4><ol><li><p>作用：让样式在局部生效，防止冲突。</p></li><li><p>写法：<code>&lt;style scoped&gt;</code></p></li></ol><h2 id="2022-5-28"><a href="#2022-5-28" class="headerlink" title="2022.5.28"></a>2022.5.28</h2><h5 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例<a href="https://img.gejiba.com/image/JKDpy"><img src="https://img.gejiba.com/images/3c76ef780aedf00172f618d6e915c54c.png" alt="3c76ef780aedf00172f618d6e915c54c.png"></a></h5><ol><li><p>组件化编码流程：</p><p>​    (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>​            1).一个组件在用：放在组件自身即可。</p><p>​            2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p>​    (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>​    (1).父组件 ==&gt; 子组件 通信</p><p>​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li><li><p>reduce方法：<a href="https://imgtu.com/i/jkQYFK"><img src="https://s1.ax1x.com/2022/06/25/jkQYFK.png" alt="jkQYFK.png"></a></p></li></ol><h2 id="2022-5-29"><a href="#2022-5-29" class="headerlink" title="2022.5.29"></a>2022.5.29</h2><h5 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h5><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p><pre><code>            该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p>​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="2022-5-30"><a href="#2022-5-30" class="headerlink" title="2022.5.30"></a>2022.5.30</h2><h5 id="·-组件的自定义事件"><a href="#·-组件的自定义事件" class="headerlink" title="· 组件的自定义事件"></a>· 组件的自定义事件</h5><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Demo ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.$refs.xxx.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="built_in">this</span>.test)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>        </p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h5 id="·-全局事件总线（GlobalEventBus）"><a href="#·-全局事件总线（GlobalEventBus）" class="headerlink" title="· 全局事件总线（GlobalEventBus）"></a>· 全局事件总线（GlobalEventBus）</h5><p><img src="https://img.gejiba.com/images/651c829a10be7022c9b22ab6557ed293.png" alt="651c829a10be7022c9b22ab6557ed293.png"></p><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">Vue.prototype.$bus = <span class="built_in">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">methods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params">data</span>)</span>&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="built_in">this</span>.demo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h5 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h5><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">methods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params">data</span>)</span>&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.pid = pubsub.subscribe(<span class="string">&#x27;xxx&#x27;</span>,<span class="built_in">this</span>.demo) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="2022-5-31"><a href="#2022-5-31" class="headerlink" title="2022.5.31"></a>2022.5.31</h2><h5 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h5><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h5 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h5><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img.gejiba.com/images/0d86ae5c899c2743c2c853863f72a070.png" alt="0d86ae5c899c2743c2c853863f72a070.png"><img src="https://img.gejiba.com/images/1a34cfa925f947a861e1639afb0fdf75.png" alt="1a34cfa925f947a861e1639afb0fdf75.png"></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="2022-6-1"><a href="#2022-6-1" class="headerlink" title="2022.6.1"></a>2022.6.1</h2><h4 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h4><p>·接口地址 <a href="https://api.github.com/search/users?q=xxx">https://api.github.com/search/users?q=xxx</a> </p><p>— vue 项目中常用的 2 个 Ajax 库 </p><p>·1 axios 通用的 Ajax 请求库, 官方推荐，使用广泛 </p><p>·2 vue-resource vue 插件库, vue1.x 使用广泛，官方已不维护</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>​    在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>​    编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="2022-6-2"><a href="#2022-6-2" class="headerlink" title="2022.6.2"></a>2022.6.2</h2><p>· vue-resource：</p><h5 id="·-插槽"><a href="#·-插槽" class="headerlink" title="· 插槽"></a>· 插槽</h5><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="2022-6-3"><a href="#2022-6-3" class="headerlink" title="2022.6.3"></a>2022.6.3</h2></li></ol><h5 id="·Vuex"><a href="#·Vuex" class="headerlink" title="·Vuex"></a>·Vuex</h5><h5 id><a href="#" class="headerlink" title></a><img src="https://img.gejiba.com/images/2c6efd97052564548d81bf41b8e90d7a.png" alt="2c6efd97052564548d81bf41b8e90d7a.png"></h5><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h5><p>?        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。<a href="https://img.gejiba.com/image/Wu8NH"><img src="https://img.gejiba.com/images/847baa8b9119eb9cfd84ef6a937c2e55.png" alt="847baa8b9119eb9cfd84ef6a937c2e55.png"></a></p><h5 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h5><p>​        多个组件需要共享数据时</p><h5 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h5><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h5 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h5><p><a href="https://img.gejiba.com/image/Wuw3O"><img src="https://img.gejiba.com/images/a33636181bdb4cf37d11ea167bfa0a39.md.png" alt="a33636181bdb4cf37d11ea167bfa0a39.md.png"></a><a href="https://img.gejiba.com/image/WuqFp"><img src="https://img.gejiba.com/images/197048d649592f0a413db14927b2d706.png" alt="197048d649592f0a413db14927b2d706.png"></a></p><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="function"><span class="title">jia</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.commit(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="function"><span class="title">JIA</span>(<span class="params">state,value</span>)</span>&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.sum += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h2 id="2022-6-4"><a href="#2022-6-4" class="headerlink" title="2022.6.4"></a>2022.6.4</h2><h5 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h5><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h5 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h5><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...mapState(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...mapState([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...mapGetters(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...mapGetters([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...mapActions(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...mapActions([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...mapMutations(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...mapMutations([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h2 id="2022-6-5"><a href="#2022-6-5" class="headerlink" title="2022.6.5"></a>2022.6.5</h2><h5 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h5><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="built_in">this</span>.$store.state.personAbout.list</span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...mapState(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="built_in">this</span>.$store.getters[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...mapGetters(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...mapActions(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...mapMutations(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="2022-6-6"><a href="#2022-6-6" class="headerlink" title="2022.6.6"></a>2022.6.6</h2><h5 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h5><p><img src="https://img.gejiba.com/images/ee44a909ae271c4071433532355d391e.png" alt="ee44a909ae271c4071433532355d391e.png"></p><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li><li> 路由分类 1）. 后端路由： 1) 理解：value 是 function, 用于处理客户端提交的请求。 2) 工作过程：服务器接收到一个请求时, 根据请求路径找到匹配的函数 来处理请求, 返回响应数据。 2）. 前端路由： 1) 理解：value 是 component，用于展示页面内容。 2) 工作过程：当浏览器的路径改变时, 对应的组件就会显示</li></ol><h5 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h5><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:About</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Home</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2022-6-7"><a href="#2022-6-7" class="headerlink" title="2022.6.7"></a>2022.6.7</h2><h5 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h5><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h5 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h5><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">routes:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:About,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Home,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:News</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:Message</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2022-5-8-1"><a href="#2022-5-8-1" class="headerlink" title="2022.5.8"></a>2022.5.8</h2><h5 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h5><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.query.id</span><br><span class="line">$route.query.title</span><br></pre></td></tr></table></figure></li></ol><h5 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h5><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Demo,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Test,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Hello,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="2022-6-9"><a href="#2022-6-9" class="headerlink" title="2022.6.9"></a>2022.6.9</h2><h5 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h5><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Home,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:News</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:Message,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:Detail</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.params.id</span><br><span class="line">$route.params.title</span><br></pre></td></tr></table></figure></li></ol><h5 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h5><p>?    作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Detail,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="function"><span class="title">props</span>(<span class="params">route</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.query.id,</span><br><span class="line"><span class="attr">title</span>:route.query.title</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h5><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h2 id="2022-6-10"><a href="#2022-6-10" class="headerlink" title="2022.6.10"></a>2022.6.10</h2><h5 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h5><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$router.replace(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">this</span>.$router.forward() <span class="comment">//前进</span></span><br><span class="line"><span class="built_in">this</span>.$router.back() <span class="comment">//后退</span></span><br><span class="line"><span class="built_in">this</span>.$router.go() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h5><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h5><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h5 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h5><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line">next() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">next() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.title)&#123; </span><br><span class="line"><span class="built_in">document</span>.title = to.meta.title <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2022-6-11"><a href="#2022-6-11" class="headerlink" title="2022.6.11"></a>2022.6.11</h2></li><li><p>独享守卫:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h5><h5 id="【npm-run-build命令打包压缩主代码，要部署服务器打开来看；可以用node-express创建服务器：安装-npm-init-gt-文件夹名-gt-一直回车-gt-安装npm-i-express-gt-在文件夹根目录右键新建服务器主文件serve-js-gt-编写代码-gt-将打包好的文件复制到里面，即可启动服务器查看】"><a href="#【npm-run-build命令打包压缩主代码，要部署服务器打开来看；可以用node-express创建服务器：安装-npm-init-gt-文件夹名-gt-一直回车-gt-安装npm-i-express-gt-在文件夹根目录右键新建服务器主文件serve-js-gt-编写代码-gt-将打包好的文件复制到里面，即可启动服务器查看】" class="headerlink" title="【npm run build命令打包压缩主代码，要部署服务器打开来看；可以用node express创建服务器：安装 npm init-&gt;文件夹名-&gt;一直回车-&gt;安装npm i express-&gt;在文件夹根目录右键新建服务器主文件serve.js-&gt;编写代码-&gt;将打包好的文件复制到里面，即可启动服务器查看】"></a>【npm run build命令打包压缩主代码，要部署服务器打开来看；可以用node express创建服务器：安装 npm init-&gt;文件夹名-&gt;一直回车-&gt;安装npm i express-&gt;在文件夹根目录右键新建服务器主文件serve.js-&gt;编写代码-&gt;将打包好的文件复制到里面，即可启动服务器查看】<img src="https://img.gejiba.com/images/74856f2501030817fc424182ea79136b.png" alt="74856f2501030817fc424182ea79136b.png"></h5><p><img src="https://img.gejiba.com/images/da4219750a47bd462c0251301e3dffc8.png" alt="da4219750a47bd462c0251301e3dffc8.png"></p><ol><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol><h5 id="14-Vue-UI-组件库"><a href="#14-Vue-UI-组件库" class="headerlink" title="14.Vue UI 组件库"></a>14.Vue UI 组件库</h5><p>1 移动端常用 UI 组件库 </p><ol><li><p>Vant <a href="https://youzan.github.io/vant">https://youzan.github.io/vant</a> </p></li><li><p> Cube UI <a href="https://didi.github.io/cube-ui">https://didi.github.io/cube-ui</a> </p></li><li><p> Mint UI <a href="http://mint-ui.github.io/">http://mint-ui.github.io</a> </p></li></ol><pre><code>2 PC 端常用 UI 组件库</code></pre><ol start="4"><li><ol><li>Element UI <a href="https://element.eleme.cn/">https://element.eleme.cn</a> </li><li>IView UI <a href="https://www.iviewui.co/">https://www.iviewui.co</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js基础</title>
      <link href="/2022/04/16/Node.js./"/>
      <url>/2022/04/16/Node.js./</url>
      
        <content type="html"><![CDATA[<h2 id="2022-4-16"><a href="#2022-4-16" class="headerlink" title="2022.4.16"></a>2022.4.16</h2><p>· 浏览器中的JavaScript运行环境：F:\Zhuo mian\api_server\app.js</p><p>（1）V8引擎（chrome浏览器运行环境）负责解析和执行JavaScript代码。</p><p>（2）内置API是由运行环境提供的特殊接口，只能在所属的运行环境中调用。</p><p>· Node.js是基于Chrome V8引擎的JavaScript运行环境（后端）。<em>浏览器是JavaScript的前端运行环境。</em>      <strong>Node.js中无法调用DOM和BOM等浏览器内置API。</strong></p><p>· 检查Node.js是否安装完成：打开终端（win+R），cmd命令，<strong>输入node -v</strong>，返回带v的版本号</p><p>· 终端：专门为开发人员设计的，用于实现人机交互的一种方式。</p><p>· 在Node.js环境中执行JavaScript代码：</p><p>（1）打开终端；（2）<strong>输入node  要执行的js文件文件名</strong>，要先跳转到该文件路径下（cd 路径），或者直接在文件目录下右键powershell执行</p><p>· 终端中的快捷键：<a href="https://imgtu.com/i/LNRMoF"><img src="https://s1.ax1x.com/2022/04/17/LNRMoF.png" alt="LNRMoF.png"></a></p><p>·fs文件系统模块：是Node.js官方提供的、用来操作文件的模块。</p><p>在JavaScript中导入：<strong>const fs=require(‘fs’)</strong></p><p>· 读取指定文件中的内容：</p><p>（1）fs.readFile()语法：<a href="https://imgtu.com/i/LNR1JJ"><img src="https://s1.ax1x.com/2022/04/17/LNR1JJ.png" alt="LNR1JJ.png"></a><a href="https://imgtu.com/i/LNR8zR"><img src="https://s1.ax1x.com/2022/04/17/LNR8zR.png" alt="LNR8zR.png"></a><a href="https://imgtu.com/i/LNR3W9"><img src="https://s1.ax1x.com/2022/04/17/LNR3W9.png" alt="LNR3W9.png"></a></p><p>· 向指定的文件中写入内容：</p><p>（1）fs.writeFile()语法：<a href="https://imgtu.com/i/LNRli4"><img src="https://s1.ax1x.com/2022/04/17/LNRli4.png" alt="LNRli4.png"></a></p><p><a href="https://imgtu.com/i/LNRYsx"><img src="https://s1.ax1x.com/2022/04/17/LNRYsx.png" alt="LNRYsx.png"></a></p><p>· fs-处理路径问题：<a href="https://imgtu.com/i/LNRtL6"><img src="https://s1.ax1x.com/2022/04/17/LNRtL6.png" alt="LNRtL6.png"></a></p><p>· path路径模块：是Node.js 官方提供的，用来处理路径的模块。先导入：<strong>const path=require(‘path’)</strong></p><p>·路径拼接优化问题：path.join()</p><p><a href="https://imgtu.com/i/LUrbtA"><img src="https://s1.ax1x.com/2022/04/17/LUrbtA.png" alt="LUrbtA.png"></a></p><p><a href="https://imgtu.com/i/LUrqfI"><img src="https://s1.ax1x.com/2022/04/17/LUrqfI.png" alt="LUrqfI.png"></a></p><p>· 获取路径的文件名：path.basename()</p><p><a href="https://imgtu.com/i/LUr2f1"><img src="https://s1.ax1x.com/2022/04/17/LUr2f1.png" alt="LUr2f1.png"></a></p><p><a href="https://imgtu.com/i/LUrgYR"><img src="https://s1.ax1x.com/2022/04/17/LUrgYR.png" alt="LUrgYR.png"></a></p><p>· 获取路径终端文件扩展名：path.extname()<a href="https://imgtu.com/i/LUsKAJ"><img src="https://s1.ax1x.com/2022/04/17/LUsKAJ.png" alt="LUsKAJ.png"></a></p><p><a href="https://imgtu.com/i/LUrOpt"><img src="https://s1.ax1x.com/2022/04/17/LUrOpt.png" alt="LUrOpt.png"></a></p><h2 id="2022-4-17"><a href="#2022-4-17" class="headerlink" title="2022.4.17"></a>2022.4.17</h2><p>· http模块：是Node.js 官方提供的、用来创建web服务器的模块。通过http模块提供的http.createServer()方法，就能方便把一台普通的电脑，变成一台Web服务器，从而对外提供Web资源服务。</p><p>导入：<strong>const http=require(‘http’)</strong></p><p>· IP地址：互联网上每台计算机的唯一地址。</p><p>· 域名地址：由字符型和地方方案组成，与IP地址是一一对应关系。<strong>127.0.0.1对应的域名是localhost</strong></p><p>· 域名服务器：是提供IP地址和域名之间的转换服务的服务器。</p><p>·端口号：每个Web服务都对应一个唯一的端口号。<strong>每个端口号不能同时被多个web服务占用。url中的80端口可以被省略。</strong></p><p>· 创建最基本的web服务器：</p><p>（1）导入http模块；（2）创建web服务器实例，**const server = http.createServer()**；（3）为服务器实例绑定request事件，监听客户端请求；（4）启动服务器。</p><p><a href="https://imgtu.com/i/LUrX1P"><img src="https://s1.ax1x.com/2022/04/17/LUrX1P.png" alt="LUrX1P.png"></a></p><p><a href="https://imgtu.com/i/LUrj6f"><img src="https://s1.ax1x.com/2022/04/17/LUrj6f.png" alt="LUrj6f.png"></a></p><p>· req请求对象：<a href="https://imgtu.com/i/LUrznS"><img src="https://s1.ax1x.com/2022/04/17/LUrznS.png" alt="LUrznS.png"></a></p><p>· res响应对象：<a href="https://imgtu.com/i/LUsS0g"><img src="https://s1.ax1x.com/2022/04/17/LUsS0g.png" alt="LUsS0g.png"></a></p><p>· 解决中文乱码问题：res.end()</p><p>· 根据不同的url响应不同的html内容：（1）获取请求到url地址；（2）设置默认的响应内容为404 Not found；（3）判断用户请求是是否为/或/index.html首页；（4）判断用户请求的是否为/about.html关于页面；（5）设置Content-Type响应头，防止中文乱码；（6）使用res.end()把内容响应给客户端</p><p><a href="https://imgtu.com/i/LUsp7Q"><img src="https://s1.ax1x.com/2022/04/17/LUsp7Q.png" alt="LUsp7Q.png"></a></p><p>· Node.js中模块的分类：内置模块、自定义模块、第三方模块（需下载）</p><p>· 加载模块：<a href="https://imgtu.com/i/LUsCkj"><img src="https://s1.ax1x.com/2022/04/17/LUsCkj.png" alt="LUsCkj.png"></a></p><p>· 模块作用域：和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，即。。。，防止全局变量污染的问题。</p><p>· 向外共享模块作用域中的成员：</p><p>（1）module对象：每个.js自定义模块都有module对象，它里面存储了和当前模块有关的信息</p><p>（2）module.exports对象：用该对象，将模块内的成员共享出去，供外界使用。外界用require()方法导入自定义模块，得到的就是module.exports所指向的对象。<a href="https://imgtu.com/i/LUsihn"><img src="https://s1.ax1x.com/2022/04/17/LUsihn.png" alt="LUsihn.png"></a></p><p>（3）exports对象：<a href="https://imgtu.com/i/LUsEcV"><img src="https://s1.ax1x.com/2022/04/17/LUsEcV.png" alt="LUsEcV.png"></a></p><p>-》exports和module.exports的使用误区：<a href="https://imgtu.com/i/LUsmBF"><img src="https://s1.ax1x.com/2022/04/17/LUsmBF.png" alt="LUsmBF.png"></a></p><p>· CommonJS模块化规范：</p><p><a href="https://imgtu.com/i/LUsn74"><img src="https://s1.ax1x.com/2022/04/17/LUsn74.png" alt="LUsn74.png"></a></p><p>· 包：Node.js中的第三方模块。全球最大的包共享平台（搜索所需）：<a href="https://www.npmjs.com/%EF%BC%9B%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E4%B8%8B%E8%BD%BD%EF%BC%89%EF%BC%9Ahttps://registry.npmjs.org/">https://www.npmjs.com/；服务器（下载）：https://registry.npmjs.org/</a></p><p><img src="https://img.gejiba.com/images/62cd2393d331068770783b943b6b6ce9.png" alt="62cd2393d331068770783b943b6b6ce9.png"></p><p>· 格式化时间的方法：<img src="https://img.gejiba.com/images/080dd128e2add44295adfdde86ae693b.png" alt="080dd128e2add44295adfdde86ae693b.png"></p><p><img src="https://img.gejiba.com/images/b02eb983b42ecbe57432668600e2aade.png" alt="b02eb983b42ecbe57432668600e2aade.png"></p><p><img src="https://img.gejiba.com/images/d0d85609246becda44c154f777bac311.png" alt="d0d85609246becda44c154f777bac311.png"></p><p>· 在项目中安装包的命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install 包的完整名称</span><br><span class="line">npm i 完整的包名称</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img.gejiba.com/images/153b93eda861087343494c4f2620f1aa.png" alt="153b93eda861087343494c4f2620f1aa.png"></p><p>· 安装指定版本的包：默认情况下，<strong>npm install</strong>  会自动安装最新版本的包，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i 包@版本号</span><br></pre></td></tr></table></figure><p><strong>· 包管理配置文件：</strong><img src="https://img.gejiba.com/images/91d4b78ad0ec5b26c24ac679ab1e7f1e.png" alt="91d4b78ad0ec5b26c24ac679ab1e7f1e.png"><img src="https://img.gejiba.com/images/03dd397a5625f7293b0af4021928abb3.png" alt="03dd397a5625f7293b0af4021928abb3.png"><img src="https://img.gejiba.com/images/68475c3febc9f0d374ad2a96b63161c7.png" alt="68475c3febc9f0d374ad2a96b63161c7.png"><img src="https://img.gejiba.com/images/fad6dffa72c3ef221ad3f07bdc05b31b.png" alt="fad6dffa72c3ef221ad3f07bdc05b31b.png"><img src="https://img.gejiba.com/images/5e2cec5c93e9b67a407ba56488dd42b9.png" alt="5e2cec5c93e9b67a407ba56488dd42b9.png"><img src="https://img.gejiba.com/images/1e30dc2a01fc3fce255a5e4b15fdba08.png" alt="1e30dc2a01fc3fce255a5e4b15fdba08.png"><img src="https://img.gejiba.com/images/1df9b88d1828de2580d3829bc6869a73.png" alt="1df9b88d1828de2580d3829bc6869a73.png"></p><p><strong>· 解决下包速度慢的问题：</strong><img src="https://img.gejiba.com/images/56b1fd9d0ff378a1cbbb04eb6f2be860.png" alt="56b1fd9d0ff378a1cbbb04eb6f2be860.png"><img src="https://img.gejiba.com/images/072c416afbf6e2bebaeec2ad8a426283.png" alt="072c416afbf6e2bebaeec2ad8a426283.png"><img src="https://img.gejiba.com/images/7a59af9c70f1989dcd0c48167404b1a0.png" alt="7a59af9c70f1989dcd0c48167404b1a0.png"></p><p>· 包的分类：</p><p>（1）项目包：被安装到项目的node_modules目录中的包。<strong>又分开发依赖包、核心依赖包</strong><img src="https://img.gejiba.com/images/7a2628a67f59d1b5fddb0528c8201a20.png" alt="7a2628a67f59d1b5fddb0528c8201a20.png"></p><p>（2）全局包：<strong>npm install -g</strong>  ;<img src="https://img.gejiba.com/images/6d52b5b5716921938a54ec5d65f169e4.png" alt="6d52b5b5716921938a54ec5d65f169e4.png"></p><p>（3）i5ting_toc：是一个可以把md文件转化为html页面的小工具。<strong>npm install -g i5ting_toc</strong><img src="https://img.gejiba.com/images/0bb75b76ae4b4e0891b34954d60e9dc3.png" alt="0bb75b76ae4b4e0891b34954d60e9dc3.png"></p><p><img src="https://img.gejiba.com/images/64a1a6fe25afc2e11a713048fed87151.png" alt="64a1a6fe25afc2e11a713048fed87151.png"></p><p>· 开发属于自己的包：</p><p>（1）需要实现的功能；</p><p>（2）初始化包的基本结构：①新建itheima-tools文件夹,作为包的根目录；②在文件夹中，新建以下三个文件：package.json（包管理配置文件）；index.js（包的入口文件）；README.md（包的说明文档）</p><p>（3）初始化package.json：<img src="https://img.gejiba.com/images/05b5f1149431e0308012f989d77ab133.png" alt="05b5f1149431e0308012f989d77ab133.png"></p><p>（4）在index.js中定义格式化时间的方法&amp;main属性<img src="https://img.gejiba.com/images/8293dc2f90e2cdddea2a2bd5dd92c95e.png" alt="8293dc2f90e2cdddea2a2bd5dd92c95e.png"></p><p>（5）在index.js中定义转义HTML方法：<a href="https://img.gejiba.com/image/HTaiO"><img src="https://img.gejiba.com/images/e4df887ccd060b20b062a0bdf8bc6c47.png" alt="e4df887ccd060b20b062a0bdf8bc6c47.png"></a></p><p>（6）在index.js中定义还原HTML方法：<img src="https://img.gejiba.com/images/7c4a6d788f28b342431462a01a285f2d.png" alt="7c4a6d788f28b342431462a01a285f2d.png"></p><p>（7）将不同功能进行模块化拆分：<img src="https://img.gejiba.com/images/f74bed0b9e07675f5ae506a583e8ee86.png" alt="f74bed0b9e07675f5ae506a583e8ee86.png"></p><p>（8）编写包的说明文档：<img src="https://img.gejiba.com/images/1d19c0cba491d4c211ddd3b22eb3687c.png" alt="1d19c0cba491d4c211ddd3b22eb3687c.png"></p><p>· 发布包：<img src="https://img.gejiba.com/images/6ee1a99412132a1e1edda444c3ecf7ab.png" alt="6ee1a99412132a1e1edda444c3ecf7ab.png"><img src="https://img.gejiba.com/images/8c4ef52f17669fb44a237735f0ae8e75.png" alt="8c4ef52f17669fb44a237735f0ae8e75.png"><img src="https://img.gejiba.com/images/dbb1d15481fb50993379b1619d969a21.png" alt="dbb1d15481fb50993379b1619d969a21.png"><img src="https://img.gejiba.com/images/165f7e1fdec5aa294474a2c6a144e0c4.png" alt="165f7e1fdec5aa294474a2c6a144e0c4.png"></p><p>· 模块的加载机制：模块在第一次加载后会被缓存，后续执行会优先从缓存中加载；内置模块的加载优先级最高；在加载自定义模块时，如果没有指定./或../开头的路径标识符，则node会把他当作内置模块或第三方模块进行加载<img src="https://img.gejiba.com/images/ba8b6cdd0d76b36f18ed8d27f96cc364.png" alt="ba8b6cdd0d76b36f18ed8d27f96cc364.png"><a href="https://img.gejiba.com/image/HT4I5"><img src="https://img.gejiba.com/images/71561545a781aabfdcb33f4e2ff3a009.png" alt="71561545a781aabfdcb33f4e2ff3a009.png"></a></p><p><img src="https://img.gejiba.com/images/d794f75ff1350f155e2d0e9905b852ce.png" alt="d794f75ff1350f155e2d0e9905b852ce.png"></p><h2 id="2022-4-18"><a href="#2022-4-18" class="headerlink" title="2022.4.18"></a>2022.4.18</h2><p>· Express:是基于Node，npm的第三方包，快速、开放、极简的Web开发框架。</p><p>使用它可以方便、快速的创建Web网站的服务器或API接口的服务器。</p><p><a href="http://www.expressjs.com.cn/">http://www.expressjs.com.cn/</a></p><p>· Express基本使用：</p><p>（1）安装：<strong>npm i <a href="mailto:&#101;&#x78;&#112;&#x72;&#101;&#115;&#115;&#x40;&#52;&#x2e;&#49;&#x37;&#x2e;&#x31;">&#101;&#x78;&#112;&#x72;&#101;&#115;&#115;&#x40;&#52;&#x2e;&#49;&#x37;&#x2e;&#x31;</a></strong></p><p>（2）创建基本Web服务器：<img src="https://img.gejiba.com/images/089fdfe5c46fb9c50eec07acf20c4337.png" alt="089fdfe5c46fb9c50eec07acf20c4337.png"></p><p>（3）监听Get请求：<img src="https://img.gejiba.com/images/b65e78709d44430e2421ec67e9873041.png" alt="b65e78709d44430e2421ec67e9873041.png"></p><p>（4）监听POST请求：<img src="https://img.gejiba.com/images/e4c427604275761830010b481f277764.png" alt="e4c427604275761830010b481f277764.png"></p><p>（5）把内容响应给客户端：<img src="https://img.gejiba.com/images/5fdca1b3226346ad4f1eeb04e39dc3ec.png" alt="5fdca1b3226346ad4f1eeb04e39dc3ec.png"></p><p>（6）获取URL中携带的查询参数：<img src="https://img.gejiba.com/images/48ba71949e419be5df90535ff65ab33e.png" alt="48ba71949e419be5df90535ff65ab33e.png"></p><p>（7）获取URL中获取的动态参数：<img src="https://img.gejiba.com/images/684e4c45bc1abf1f975b40c75a19ed25.png" alt="684e4c45bc1abf1f975b40c75a19ed25.png"></p><p>· Express-托管静态资源：</p><p>（1）express.static()：<img src="https://img.gejiba.com/images/fd2fb59364dfdcf1fe959fa6903017b8.png" alt="fd2fb59364dfdcf1fe959fa6903017b8.png"></p><p>（2）托管多个静态资源目录：<img src="https://img.gejiba.com/images/f11c15057f37871938ffd338255f43d5.png" alt="f11c15057f37871938ffd338255f43d5.png"></p><p>（3）挂载路径前缀：<img src="https://img.gejiba.com/images/8cda7e218fdd8b1ac7a43b58d86ed275.png" alt="8cda7e218fdd8b1ac7a43b58d86ed275.png"></p><p>· Express-nodemon：用来监听项目文件的变动，当代码修改后，nodemon会<strong>自动给帮我们重启项目</strong>，极大方便了开发和测试。</p><p>（1）安装：<strong>npm i -g nodemon</strong></p><p>（2）使用：<strong>nodemon app.js</strong></p><p>· Express-路由：指的是客户端的请求与服务器处理函数之间的映射关系。<img src="https://img.gejiba.com/images/dc04d450f55c2889037573b35497c127.png" alt="dc04d450f55c2889037573b35497c127.png"></p><p><img src="https://img.gejiba.com/images/e4701f15ebf576a91778e833a5c71861.png" alt="e4701f15ebf576a91778e833a5c71861.png">（1）分三部分：请求的类型、请求的URL地址、处理函数：<strong>app.METHOD(PATH,HANDLER)</strong></p><p>（2）路由的匹配过程：将路由挂到app上<img src="https://img.gejiba.com/images/0bf184aa7ffb1cea3a86bc34e8c46441.png" alt="0bf184aa7ffb1cea3a86bc34e8c46441.png"></p><p>（3）模块化路由：将路由抽离为单独模块<img src="https://img.gejiba.com/images/14a4640da610bce090ed6ef4e4e5eb37.png" alt="14a4640da610bce090ed6ef4e4e5eb37.png"><img src="https://img.gejiba.com/images/ee700a19513274ddd17e34828b4a7b0e.png" alt="ee700a19513274ddd17e34828b4a7b0e.png"><img src="https://img.gejiba.com/images/30353f78c76db949a1f612f808944251.png" alt="30353f78c76db949a1f612f808944251.png"><img src="https://img.gejiba.com/images/dea1a05904ab17a7f503f2d93e85d18e.png" alt="dea1a05904ab17a7f503f2d93e85d18e.png"></p><p>· Express-中间件：中间处理过程<img src="https://img.gejiba.com/images/fbc6245455c2e3e0d42625ea71e33c73.png" alt="fbc6245455c2e3e0d42625ea71e33c73.png"></p><p>（1）中间件格式：<img src="https://img.gejiba.com/images/f723addada2a8b0f7989a3c89ff7adb5.png" alt="f723addada2a8b0f7989a3c89ff7adb5.png"></p><p>（2）next函数的作用：<img src="https://img.gejiba.com/images/394b787949fa41945728d006643490df.png" alt="394b787949fa41945728d006643490df.png"></p><p>（3）定义中间件函数：<img src="https://img.gejiba.com/images/5cbcbd204447b0d50620d07d52c9da5b.png" alt="5cbcbd204447b0d50620d07d52c9da5b.png"></p><p>（4）全局生效的中间件：<img src="https://img.gejiba.com/images/54e5b677fab47aa210ef0f0baf688ae6.png" alt="54e5b677fab47aa210ef0f0baf688ae6.png"><img src="https://img.gejiba.com/images/b6909313df93f7aea5a54a7e163be1ca.png" alt="b6909313df93f7aea5a54a7e163be1ca.png"></p><p>（5）中间件的作用：<img src="https://img.gejiba.com/images/570e34f88fa01b047d69123a886891fe.png" alt="570e34f88fa01b047d69123a886891fe.png"></p><p>（6）定义多个全局中间件：<img src="https://img.gejiba.com/images/cc4e40546b62e2009aa96f371ee05b75.png" alt="cc4e40546b62e2009aa96f371ee05b75.png"></p><p>（7）局部生效的中间件：<img src="https://img.gejiba.com/images/36283b0ede61ea15e70f97e9cbe4430c.png" alt="36283b0ede61ea15e70f97e9cbe4430c.png"></p><p>（8）定义多个局部中间件：<img src="https://img.gejiba.com/images/7a4716fd0dd6dece08437d2f2e17d867.png" alt="7a4716fd0dd6dece08437d2f2e17d867.png"></p><p>（9）中间件的五个注意事项：<img src="https://img.gejiba.com/images/1ac22ab1c7399e88fc85ef383960c826.png" alt="1ac22ab1c7399e88fc85ef383960c826.png"></p><p>（10）中间件的分类：应用级别的中间件、路由基本的、错误级别的、Express内置的、第三方的<img src="https://img.gejiba.com/images/d8909da5437cb5fcebb65f28ed05ca9b.png" alt="d8909da5437cb5fcebb65f28ed05ca9b.png"><a href="https://img.gejiba.com/image/XxdD3"><img src="https://img.gejiba.com/images/dd753f72a4c6a93debd0a27ace137966.png" alt="dd753f72a4c6a93debd0a27ace137966.png"></a><img src="https://img.gejiba.com/images/fbbbe0f2157ce9561af31a4f3a524d73.png" alt="fbbbe0f2157ce9561af31a4f3a524d73.png"><img src="https://img.gejiba.com/images/926c9d3fd8d702502dd9ba43fa31c6d4.png" alt="926c9d3fd8d702502dd9ba43fa31c6d4.png"><img src="https://img.gejiba.com/images/25481474e3c531680ee52ded467cc547.png" alt="25481474e3c531680ee52ded467cc547.png"></p><p>（11）自定义中间件：<img src="https://img.gejiba.com/images/2b9562d82a8255f9d56606e49b0a17a9.png" alt="2b9562d82a8255f9d56606e49b0a17a9.png"></p><p>· 使用Express写接口：</p><p>（1）创建基本的服务器：<img src="https://img.gejiba.com/images/0e062af450c167cbb687b89c5388ba20.png" alt="0e062af450c167cbb687b89c5388ba20.png"></p><p>（2）创建API路由模块：<img src="https://img.gejiba.com/images/2686fcf9105855260d33ce71f699fe96.png" alt="2686fcf9105855260d33ce71f699fe96.png"></p><p>（3）编写Get接口：<img src="https://img.gejiba.com/images/2d24dd8fc61a75a6f17ca97502e79a80.png" alt="2d24dd8fc61a75a6f17ca97502e79a80.png"></p><p>（4）编写Post接口：<img src="https://img.gejiba.com/images/0e22dc238a33eb68d1dcd794a8bfee83.png" alt="0e22dc238a33eb68d1dcd794a8bfee83.png"></p><p>（5）基于cors解决跨域接口问题：<img src="https://img.gejiba.com/images/7564225308a57e9c97b639c7f40ad607.png" alt="7564225308a57e9c97b639c7f40ad607.png"><img src="https://img.gejiba.com/images/a657a9cdec50e27928879536893e3547.png" alt="a657a9cdec50e27928879536893e3547.png"></p><p>· Express-CORS跨域资源共享<img src="https://img.gejiba.com/images/fad6b366c95e1d6831770a8d6af1b529.png" alt="fad6b366c95e1d6831770a8d6af1b529.png"></p><p><img src="https://img.gejiba.com/images/79ad2550067575ede8e9342127d7341f.png" alt="79ad2550067575ede8e9342127d7341f.png"></p><p>（1）cors响应头部-Access-Control-Allow-<strong>Origin</strong><img src="https://img.gejiba.com/images/158336a6a5d53bb681e9a6c46d024e2c.png" alt="158336a6a5d53bb681e9a6c46d024e2c.png"></p><p>（2）cors响应头部-Access-Control-Allow-<strong>Headers</strong><img src="https://img.gejiba.com/images/f460278c46a8159721b46c199c054adc.png" alt="f460278c46a8159721b46c199c054adc.png"></p><p>（3）cors响应头部-Access-Control-Allow-<strong>Methods</strong><img src="https://img.gejiba.com/images/a19cbbebb1e581783b8d553c359d0d19.png" alt="a19cbbebb1e581783b8d553c359d0d19.png"></p><p>（4）简单请求：<img src="https://img.gejiba.com/images/ceebe8115e542a599c2662152ebf6987.png" alt="ceebe8115e542a599c2662152ebf6987.png"></p><p>（5）预检请求：<img src="https://img.gejiba.com/images/5037c0c8cc6da2f482be4095eddf577b.png" alt="5037c0c8cc6da2f482be4095eddf577b.png"><img src="https://img.gejiba.com/images/3c99fcaebecf0f6c06311908b85a62d5.png" alt="3c99fcaebecf0f6c06311908b85a62d5.png"></p><p>（6）JSONP接口：<a href="https://img.gejiba.com/image/XxjXV"><img src="https://img.gejiba.com/images/77d81fe79315cf11d76b79c6d5e252c8.png" alt="77d81fe79315cf11d76b79c6d5e252c8.png"></a><img src="https://img.gejiba.com/images/cf9c8ae503154ddcddc1cd1f35efb634.png" alt="cf9c8ae503154ddcddc1cd1f35efb634.png"><img src="https://img.gejiba.com/images/90fe99e449b5b7aadb41de30ac921fc5.png" alt="90fe99e449b5b7aadb41de30ac921fc5.png"><img src="https://img.gejiba.com/images/d29257f744be289052c7efe89eae4e8a.png" alt="d29257f744be289052c7efe89eae4e8a.png"></p><p><img src="https://img.gejiba.com/images/50b510a9e8d1fce69a5bf23787f9b50e.png" alt="50b510a9e8d1fce69a5bf23787f9b50e.png"></p><h2 id="2022-4-19"><a href="#2022-4-19" class="headerlink" title="2022.4.19"></a>2022.4.19</h2><p>· 常见数据库：<img src="https://img.gejiba.com/images/43a62a93ff3a79f916bb3ddd022e9da1.png" alt="43a62a93ff3a79f916bb3ddd022e9da1.png"></p><p>·传统型数据库的数据组织结构：数据库、数据表、数据行、字段</p><p>·MySQL：MySQL Server、MySQL Workbench</p><p>· SQL：是结构化查询语言，专门用来访问和处理数据库的编程语言。能够让我们以编程的形式，操作数据库里面的数据库。</p><p>(1)SELECT语句：users表中选取所有的列，<strong>用符号</strong>*取代列的名称<img src="https://img.gejiba.com/images/ceaa3cfaf1f7016d214d5bd9946edbf4.png" alt="ceaa3cfaf1f7016d214d5bd9946edbf4.png"><a href="https://img.gejiba.com/image/5Cvul"><img src="https://img.gejiba.com/images/ff9d4a5373f65184309bf283d81a255f.png" alt="ff9d4a5373f65184309bf283d81a255f.png"></a></p><p>(2)INSERT INTO语句：<img src="https://img.gejiba.com/images/6eaf600d7ac090173593b75bd02b52b6.png" alt="6eaf600d7ac090173593b75bd02b52b6.png"><img src="https://img.gejiba.com/images/ae604c6b3ca3f0be5066e77878094680.png" alt="ae604c6b3ca3f0be5066e77878094680.png"></p><p>(3)UPDATE语句：<img src="https://img.gejiba.com/images/623b7be03c88b3465d5392de6977157d.png" alt="623b7be03c88b3465d5392de6977157d.png"><img src="https://img.gejiba.com/images/943a4a49077649cdb4a86aba1c60dabb.png" alt="943a4a49077649cdb4a86aba1c60dabb.png"></p><p>(4)DELETE语句：<img src="https://img.gejiba.com/images/39b1f9966e7b3cbef34606f8c0185158.png" alt="39b1f9966e7b3cbef34606f8c0185158.png"><img src="https://img.gejiba.com/images/c20f86474d300a26bc173c93d310c600.png" alt="c20f86474d300a26bc173c93d310c600.png"></p><p>(5)WHERE子句：<a href="https://img.gejiba.com/image/5CKhZ"><img src="https://img.gejiba.com/images/afea23f7de00d65bfe0718ad950bb3ce.png" alt="afea23f7de00d65bfe0718ad950bb3ce.png"></a><img src="https://img.gejiba.com/images/fd1a299cb62594c3d6e9c5b1103a2b72.png" alt="fd1a299cb62594c3d6e9c5b1103a2b72.png"><img src="https://img.gejiba.com/images/a8c7f2899d2d380a266d90c6b24d1fca.png" alt="a8c7f2899d2d380a266d90c6b24d1fca.png"></p><p>(6)and和or运算符：<img src="https://img.gejiba.com/images/d59830fd38034a8639f6f320bbb147a3.png" alt="d59830fd38034a8639f6f320bbb147a3.png"><img src="https://img.gejiba.com/images/9ccad7531b60ee3643ac0e9d1b9ffb04.png" alt="9ccad7531b60ee3643ac0e9d1b9ffb04.png"><img src="https://img.gejiba.com/images/ef793f25ac6525a6aa0e7717f771416a.png" alt="ef793f25ac6525a6aa0e7717f771416a.png"></p><p>(7)ORDER BY子句：<img src="https://img.gejiba.com/images/b670b6d62e24f7fe842e450f52a9a266.png" alt="b670b6d62e24f7fe842e450f52a9a266.png"><img src="https://img.gejiba.com/images/27047edde8c3bf89acdadf689e6c0730.png" alt="27047edde8c3bf89acdadf689e6c0730.png"><img src="https://img.gejiba.com/images/55fd2d26e2906073343a996aad54dcc4.png" alt="55fd2d26e2906073343a996aad54dcc4.png"><img src="https://img.gejiba.com/images/c7e427dbbffa8c6cf985d401a593b794.png" alt="c7e427dbbffa8c6cf985d401a593b794.png"></p><p>(8)COUNT(*)函数：<img src="https://img.gejiba.com/images/25b1dc4f7ec8ff202f32c5f9839a4138.png" alt="25b1dc4f7ec8ff202f32c5f9839a4138.png"><img src="https://img.gejiba.com/images/2f6306d3da07e1b0494067911d46d2d7.png" alt="2f6306d3da07e1b0494067911d46d2d7.png"></p><p>-》AS关键字：<a href="https://img.gejiba.com/image/5KyAv"><img src="https://img.gejiba.com/images/0bfe310e6aad2a93380176b555005968.png" alt="0bfe310e6aad2a93380176b555005968.png"></a></p><p>· Web开发模式：</p><p>-》服务端渲染的web开发模式：服务器发送给客户端的HTML页面，是在服务器通过字符串的拼接，动态生成的。</p><p>-》前后端分离的web开发模式：前后端分离，依赖于Ajax技术，就是后端只负责提供API接口，前端使用AJAX调用接口的开发模式</p><p>· 身份认证：通过一定手段，完成对用户身份的确认。</p><p>-》服务端渲染用Session认证机制</p><p>-》前后端分离用JWT认证机制</p><p>· Session认证机制：需要配合Cookie<img src="https://img.gejiba.com/images/b8daac6540bbed344e8a8e0401fc939b.png" alt="b8daac6540bbed344e8a8e0401fc939b.png"></p><p>-》HTTP协议的无状态性：服务器不会主动保留每次HTTP请求的状态。<img src="https://img.gejiba.com/images/8e8b64193852713b18516d1f2da93236.png" alt="8e8b64193852713b18516d1f2da93236.png"><img src="https://img.gejiba.com/images/6b52968202f29766d98dde2739a191ab.png" alt="6b52968202f29766d98dde2739a191ab.png"></p><p>-》Cookie：是存储在用户浏览器中的一段不超过4KB的字符串。不具有安全性<a href="https://img.gejiba.com/image/5K97p"><img src="https://img.gejiba.com/images/e26b793813a87ce1880c7fa56fdfe232.png" alt="e26b793813a87ce1880c7fa56fdfe232.png"></a><a href="https://img.gejiba.com/image/5KSGD"><img src="https://img.gejiba.com/images/d271fb1a21b62af582bb4e67ce860110.png" alt="d271fb1a21b62af582bb4e67ce860110.png"></a><a href="https://img.gejiba.com/image/5KABO"><img src="https://img.gejiba.com/images/ca2fee0f4dbfb1c725c23bfde38a25c1.png" alt="ca2fee0f4dbfb1c725c23bfde38a25c1.png"></a></p><p>-》Session的工作原理：<a href="https://img.gejiba.com/image/5KpXT"><img src="https://img.gejiba.com/images/dd2e51c9cba8d95e15da49444bb6709b.png" alt="dd2e51c9cba8d95e15da49444bb6709b.png"></a></p><p>-》配置express-session中间件：<strong>npm i express-session</strong><a href="https://img.gejiba.com/image/5KFWq"><img src="https://img.gejiba.com/images/a8e34cc29adf580ca1b3ebb18cb0cb5b.png" alt="a8e34cc29adf580ca1b3ebb18cb0cb5b.png"></a></p><p>-》存数据：<img src="https://img.gejiba.com/images/8faf6f2141a646b428895991ee28968e.png" alt="8faf6f2141a646b428895991ee28968e.png"></p><p>-》取数据：<img src="https://img.gejiba.com/images/cca4434abe200a922e1c3b34fba6a316.png" alt="cca4434abe200a922e1c3b34fba6a316.png"></p><p>-》清空session：只会清空当前用户的session，不会清空所有用户的session<img src="https://img.gejiba.com/images/53aa9188ef6c291bd0eedad9b75c9046.png" alt="53aa9188ef6c291bd0eedad9b75c9046.png"></p><p>· JWT：最流行的跨域认证解决方案</p><p>-》工作原理：<img src="https://img.gejiba.com/images/7d7526a4e777bd948a48877f449b6101.png" alt="7d7526a4e777bd948a48877f449b6101.png"></p><p>-》组成部分：头部、有效荷载、签名<img src="https://img.gejiba.com/images/8accee90241988ded517cbfa2adb92d4.png" alt="8accee90241988ded517cbfa2adb92d4.png"><img src="https://img.gejiba.com/images/0319c865889cf482cb3ccd932fcd9658.png" alt="0319c865889cf482cb3ccd932fcd9658.png"></p><p>-》使用方式：<img src="https://img.gejiba.com/images/8db17c7c8bf1bf318cd110d008309adc.png" alt="8db17c7c8bf1bf318cd110d008309adc.png"> </p><p>-》在express中使用JWT（在express中生成token）：<img src="https://img.gejiba.com/images/3546c5feff80ab3463a68ee992ab8f85.png" alt="3546c5feff80ab3463a68ee992ab8f85.png"><img src="https://img.gejiba.com/images/cf7db831a292c7097390c3cc78b03a80.png" alt="cf7db831a292c7097390c3cc78b03a80.png"><img src="https://img.gejiba.com/images/ed62c69bafd022afecd1fc030197e565.png" alt="ed62c69bafd022afecd1fc030197e565.png"><img src="https://img.gejiba.com/images/100265004b6f5a7b194c2ce749e126ab.png" alt="100265004b6f5a7b194c2ce749e126ab.png"><img src="https://img.gejiba.com/images/a7b776c9c0d93077c4298ebc9d94980c.png" alt="a7b776c9c0d93077c4298ebc9d94980c.png"><img src="https://img.gejiba.com/images/3dd2a05e80c99ff577fb424f5fc661af.png" alt="3dd2a05e80c99ff577fb424f5fc661af.png"><img src="https://img.gejiba.com/images/1a6358464f81f1c1466c7c7666bae787.png" alt="1a6358464f81f1c1466c7c7666bae787.png"></p><h4 id="npm下载包时总报错："><a href="#npm下载包时总报错：" class="headerlink" title="npm下载包时总报错："></a><strong>npm下载包时总报错：</strong></h4><p>1.打开cmd，输入以下命令，先设置代理：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set proxy=</span><br></pre></td></tr></table></figure><p>2.然后使用淘宝镜像：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.再下载包</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax基础</title>
      <link href="/2022/04/11/Ajax/"/>
      <url>/2022/04/11/Ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-4-11"><a href="#2022-4-11" class="headerlink" title="2022.4.11"></a>2022.4.11</h2><p>· 服务器：上网过程中，负责<strong>存放和对外提供资源</strong>的电脑。</p><p>· 客户端：上网过程中，负责<strong>获取和消费资源</strong>的电脑。</p><p>· URL（统一资源定位符）：用于识别互联网上每个资源的唯一存放位置。</p><p>（1）客户端与服务器之间的<strong>通信协议</strong></p><p>（2）存有该资源的<strong>服务器名称</strong></p><p>（3）资源在服务器上<strong>具体的存放位置</strong><a href="https://imgtu.com/i/LZlYCt"><img src="https://s1.ax1x.com/2022/04/11/LZlYCt.png" alt="LZlYCt.png"></a></p><p>· 客户端与服务器的通信过程：请求 - 处理 - 响应<a href="https://imgtu.com/i/LZlUv8"><img src="https://s1.ax1x.com/2022/04/11/LZlUv8.png" alt="LZlUv8.png"></a><a href="https://imgtu.com/i/LZlNgf"><img src="https://s1.ax1x.com/2022/04/11/LZlNgf.png" alt="LZlNgf.png"></a></p><p>· （数据是资源）资源的请求方式：</p><p>（1）get请求用于获取服务端资源（向服务器要资源）</p><p>（2）post请求用于向服务器提交数据（往服务器发送资源）</p><p>· XMLHttpRequest（xhl）：是浏览器提供的js成员，通过它可以请求服务器上的数据资源。数据交互</p><p>· Ajax（异步JavaScript和XML）：在网页中利用XMLHttpRequest对象和服务器进行数据交互的方式</p><p>· jQuery中发起Ajax请求常用的三个方法：$.get();  $.post();   $.ajax();</p><p>（1）$.get()：专门用来发起get请求，从而将服务器上的资源请求到客户端来进行使用。<a href="https://imgtu.com/i/LZlG4I"><img src="https://s1.ax1x.com/2022/04/11/LZlG4I.png" alt="LZlG4I.png"></a></p><p>-》$.get()发起不带参数的请求：<a href="https://imgtu.com/i/LZlwDg"><img src="https://s1.ax1x.com/2022/04/11/LZlwDg.png" alt="LZlwDg.png"></a></p><p>-》$.get()发起带参数的请求：<a href="https://imgtu.com/i/LZlt8P"><img src="https://s1.ax1x.com/2022/04/11/LZlt8P.png" alt="LZlt8P.png"></a></p><p>（2）$.post()：专门用来发起post请求，从而向服务器提交数据。<a href="https://imgtu.com/i/LZldKS"><img src="https://s1.ax1x.com/2022/04/11/LZldKS.png" alt="LZldKS.png"></a></p><p>-》$.post()向服务器提交数据：<a href="https://imgtu.com/i/LZlDEj"><img src="https://s1.ax1x.com/2022/04/11/LZlDEj.png" alt="LZlDEj.png"></a></p><p>（3）$.ajax()：对Ajax请求进行更详细的配置；<a href="https://imgtu.com/i/LZl0bQ"><img src="https://s1.ax1x.com/2022/04/11/LZl0bQ.png" alt="LZl0bQ.png"></a></p><p>-》$.ajax()发起get请求：<a href="https://imgtu.com/i/LZlc80"><img src="https://s1.ax1x.com/2022/04/11/LZlc80.png" alt="LZlc80.png"></a></p><p>-》$.ajax()发起post请求：<a href="https://imgtu.com/i/LZl6Cq"><img src="https://s1.ax1x.com/2022/04/11/LZl6Cq.png" alt="LZl6Cq.png"></a></p><h2 id="2022-4-12"><a href="#2022-4-12" class="headerlink" title="2022.4.12"></a>2022.4.12</h2><p>· 接口：使用Ajax请求数据时，被请求的URL地址。每个接口必须有请求方式。)</p><p>· 接口测试工具：PostMan</p><p>· 接口文档：[<img src="https://s1.ax1x.com/2022/04/13/LQVpod.png" alt="LQVpod.png">](<a href="https://imgtu.com/i/LQVpod">https://imgtu.com/i/LQVpod</a></p><p>· form表单负责数据采集功能。</p><p>（1）表单标签：<strong>form</strong>（2）表单域（input）：文本框、密码框、隐藏框、多行文本框等 （3）表单按钮（button）</p><p>· form标签属性：<a href="https://imgtu.com/i/LQAJ3V"><img src="https://s1.ax1x.com/2022/04/13/LQAJ3V.png" alt="LQAJ3V.png"></a></p><p>（1）action：用来规定当提交表单时，向何处发送表单数据<a href="https://imgtu.com/i/LQVmwQ"><img src="https://s1.ax1x.com/2022/04/13/LQVmwQ.png" alt="LQVmwQ.png"></a></p><p>（2）target：用来规定在何处打开action URL<a href="https://imgtu.com/i/L1wZB8"><img src="https://s1.ax1x.com/2022/04/14/L1wZB8.png" alt="L1wZB8.png"></a></p><p>（3）method：用来规定以何种方式把表单数据提交到action URL <a href="https://imgtu.com/i/LQVQWq"><img src="https://s1.ax1x.com/2022/04/13/LQVQWq.png" alt="LQVQWq.png"></a></p><p>（4）enctype：用来规定发送表单数据之前如何对数据进行编码<a href="https://imgtu.com/i/LQAdHJ"><img src="https://s1.ax1x.com/2022/04/13/LQAdHJ.png" alt="LQAdHJ.png"></a><a href="https://imgtu.com/i/LQAs9x"><img src="https://s1.ax1x.com/2022/04/13/LQAs9x.png" alt="LQAs9x.png"></a></p><h2 id="2022-4-13"><a href="#2022-4-13" class="headerlink" title="2022.4.13"></a>2022.4.13</h2><p>· 表单的同步提交：通过点击submit按钮，触发表单提交的操作，从而使页面跳转到action URL的行为<a href="https://imgtu.com/i/LQA2uD"><img src="https://s1.ax1x.com/2022/04/13/LQA2uD.png" alt="LQA2uD.png"></a></p><p>· 通过Ajax提交表单数据：</p><p>（1）监听表单提交事件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#forml&#x27;).submit(function(e)&#123;</span><br><span class="line">alert(&#x27;监听到了表单的提交事件&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(&#x27;#forml&#x27;).on(&#x27;submit&#x27;,function(e)&#123;</span><br><span class="line">alert(&#x27;监听到了表单的提交事件&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(2)阻止表单默认提交行为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#forml&#x27;).submit(function(e)&#123;</span><br><span class="line">e.preventDefault()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(&#x27;#forml&#x27;).on(&#x27;submit&#x27;,function(e)&#123;</span><br><span class="line">e.preventDefault()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(3)快速获取表单中的数据：<a href="https://imgtu.com/i/LQAWHH"><img src="https://s1.ax1x.com/2022/04/13/LQAWHH.png" alt="LQAWHH.png"></a><a href="https://imgtu.com/i/LQA54I"><img src="https://s1.ax1x.com/2022/04/13/LQA54I.png" alt="LQA54I.png"></a></p><p>· 模板引擎：可根据程序员指定的模板结构和数据，自动生成一个完整的HTML页面</p><p>art-template模板引擎：<a href="http://aui.github.io/art-template/zh-cn/index.html">http://aui.github.io/art-template/zh-cn/index.html</a></p><p>下载：<a href="http://aui.github.io/art-template/zh-cn/docs/installation.html[![L1hR3V.png](https://s1.ax1x.com/2022/04/14/L1hR3V.png)](https://imgtu.com/i/L1hR3V)">http://aui.github.io/art-template/zh-cn/docs/installation.html[![L1hR3V.png](https://s1.ax1x.com/2022/04/14/L1hR3V.png)](https://imgtu.com/i/L1hR3V)</a></p><p>· art模板引擎标准语法：<a href="https://imgtu.com/i/L1hfjU"><img src="https://s1.ax1x.com/2022/04/14/L1hfjU.png" alt="L1hfjU.png"></a><a href="https://imgtu.com/i/L1hchq"><img src="https://s1.ax1x.com/2022/04/14/L1hchq.png" alt="L1hchq.png"></a><a href="https://imgtu.com/i/L1h4uF"><img src="https://s1.ax1x.com/2022/04/14/L1h4uF.png" alt="L1h4uF.png"></a><a href="https://imgtu.com/i/L1h290"><img src="https://s1.ax1x.com/2022/04/14/L1h290.png" alt="L1h290.png"></a><a href="https://imgtu.com/i/L1h5B4"><img src="https://s1.ax1x.com/2022/04/14/L1h5B4.png" alt="L1h5B4.png"></a><a href="https://imgtu.com/i/L1hIHJ"><img src="https://s1.ax1x.com/2022/04/14/L1hIHJ.png" alt="L1hIHJ.png"></a><a href="https://imgtu.com/i/L1hTE9"><img src="https://s1.ax1x.com/2022/04/14/L1hTE9.png" alt="L1hTE9.png"></a><a href="https://imgtu.com/i/L1hH41"><img src="https://s1.ax1x.com/2022/04/14/L1hH41.png" alt="L1hH41.png"></a></p><h2 id="2022-4-14"><a href="#2022-4-14" class="headerlink" title="2022.4.14"></a>2022.4.14</h2><p>· 正则表达式与字符串操作：<a href="https://imgtu.com/i/L1hq9x"><img src="https://s1.ax1x.com/2022/04/14/L1hq9x.png" alt="L1hq9x.png"></a><a href="https://imgtu.com/i/L1hL36"><img src="https://s1.ax1x.com/2022/04/14/L1hL36.png" alt="L1hL36.png"></a><a href="https://imgtu.com/i/L1hOgK"><img src="https://s1.ax1x.com/2022/04/14/L1hOgK.png" alt="L1hOgK.png"></a><a href="https://imgtu.com/i/L1hXjO"><img src="https://s1.ax1x.com/2022/04/14/L1hXjO.png" alt="L1hXjO.png"></a><a href="https://imgtu.com/i/L1hvuD"><img src="https://s1.ax1x.com/2022/04/14/L1hvuD.png" alt="L1hvuD.png"></a><a href="https://imgtu.com/i/L1hxDe"><img src="https://s1.ax1x.com/2022/04/14/L1hxDe.png" alt="L1hxDe.png"></a></p><p>· 正则-实现简易的模板引擎：<a href="https://imgtu.com/i/L1hzHH"><img src="https://s1.ax1x.com/2022/04/14/L1hzHH.png" alt="L1hzHH.png"></a><a href="https://imgtu.com/i/L14pEd"><img src="https://s1.ax1x.com/2022/04/14/L14pEd.png" alt="L14pEd.png"></a></p><p>· XMLHttpRequest的概念：<a href="https://imgtu.com/i/L14F8P"><img src="https://s1.ax1x.com/2022/04/14/L14F8P.png" alt="L14F8P.png"></a><a href="https://imgtu.com/i/L149UA"><img src="https://s1.ax1x.com/2022/04/14/L149UA.png" alt="L149UA.png"></a><a href="https://imgtu.com/i/L14C4I"><img src="https://s1.ax1x.com/2022/04/14/L14C4I.png" alt="L14C4I.png"></a><a href="https://imgtu.com/i/L14kgf"><img src="https://s1.ax1x.com/2022/04/14/L14kgf.png" alt="L14kgf.png"></a></p><p>· XMLHttpRequest的基本使用：</p><p><a href="https://imgtu.com/i/L14iCt"><img src="https://s1.ax1x.com/2022/04/14/L14iCt.png" alt="L14iCt.png"></a><a href="https://imgtu.com/i/L8E2sx"><img src="https://s1.ax1x.com/2022/04/15/L8E2sx.png" alt="L8E2sx.png"></a><a href="https://imgtu.com/i/L8ERL6"><img src="https://s1.ax1x.com/2022/04/15/L8ERL6.png" alt="L8ERL6.png"></a><img src="https://img.gejiba.com/images/9e3554662188b7e25b4cd5b3b132f743.png" alt="9e3554662188b7e25b4cd5b3b132f743.png"><a href="https://imgtu.com/i/L8E6zR"><img src="https://s1.ax1x.com/2022/04/15/L8E6zR.png" alt="L8E6zR.png"></a></p><p><a href="https://imgtu.com/i/L8EhdO"><img src="https://s1.ax1x.com/2022/04/15/L8EhdO.png" alt="L8EhdO.png"></a><a href="https://imgtu.com/i/L8EoJH"><img src="https://s1.ax1x.com/2022/04/15/L8EoJH.png" alt="L8EoJH.png"></a></p><p><a href="https://imgtu.com/i/L8E4oD"><img src="https://s1.ax1x.com/2022/04/15/L8E4oD.png" alt="L8E4oD.png"></a><a href="https://imgtu.com/i/L8EIFe"><img src="https://s1.ax1x.com/2022/04/15/L8EIFe.png" alt="L8EIFe.png"></a></p><p><img src="https://img.gejiba.com/images/70c23e807074cecdc2f673c4fce6800e.png" alt="70c23e807074cecdc2f673c4fce6800e.png"><a href="https://imgtu.com/i/L8EfeK"><img src="https://s1.ax1x.com/2022/04/15/L8EfeK.png" alt="L8EfeK.png"></a></p><h2 id="2022-4-15"><a href="#2022-4-15" class="headerlink" title="2022.4.15"></a>2022.4.15</h2><p>· 数据交换格式：服务器端与客户端之间进行数据传输与交换的格式。前端中常用XML和JSON。</p><p>· XML：可扩展标记语言。用来传输和存储数据。</p><p>· JSON：是JavaScript对象和数组的字符串表示法，它使用文本表示一个JS对象或数组的信息，so，<strong>JSON的本质是字符串</strong>。是一种轻量级的文本数据交换格式。</p><p>-》两种结构：对象结构和数组结构<img src="https://img.gejiba.com/images/16e78b3571028f622e17702e9e6c7870.png" alt="16e78b3571028f622e17702e9e6c7870.png"><img src="https://img.gejiba.com/images/280b81700118d870e9ed43ee6fefdaf7.png" alt="280b81700118d870e9ed43ee6fefdaf7.png"><img src="https://img.gejiba.com/images/1fe4754e555e0cbdbae0ec33b4a26e75.png" alt="1fe4754e555e0cbdbae0ec33b4a26e75.png"><img src="https://img.gejiba.com/images/7a7b69ce5cd11fd94720682a43264219.png" alt="7a7b69ce5cd11fd94720682a43264219.png"><img src="https://img.gejiba.com/images/6e0ea25946998b6f7f119e04e14bbc0b.png" alt="6e0ea25946998b6f7f119e04e14bbc0b.png"><img src="https://img.gejiba.com/images/b3145f7cc5175952dd1437c13e23b9be.png" alt="b3145f7cc5175952dd1437c13e23b9be.png"></p><p>· 封装自己的Ajax函数：<img src="https://img.gejiba.com/images/e8211323a099e419aeedbb23d477f5a4.png" alt="e8211323a099e419aeedbb23d477f5a4.png"><img src="https://img.gejiba.com/images/4f4ead26c407e57a1f1d22a4345533a5.png" alt="4f4ead26c407e57a1f1d22a4345533a5.png"><img src="https://img.gejiba.com/images/6103cfeea16c70e28609245d5d348be8.png" alt="6103cfeea16c70e28609245d5d348be8.png"><img src="https://img.gejiba.com/images/c590ca55a2b4df07689df31fa43f29f6.png" alt="c590ca55a2b4df07689df31fa43f29f6.png"></p><p><img src="https://img.gejiba.com/images/2066ab24599a449422456e49acb574bd.png" alt="2066ab24599a449422456e49acb574bd.png"></p><p>· XMLHttpRequest Level2新特性：<img src="https://img.gejiba.com/images/10e7c3b6ccb798bf3129f24eedb0f167.png" alt="10e7c3b6ccb798bf3129f24eedb0f167.png"></p><p>· 设置HTTP请求时限：<img src="https://img.gejiba.com/images/db0dacd635c41d9a10971028dfb826e1.png" alt="db0dacd635c41d9a10971028dfb826e1.png"></p><p>· FormData对象的使用：俩种方法<img src="https://img.gejiba.com/images/23a394167b69b117aabec6fc4813dcbe.png" alt="23a394167b69b117aabec6fc4813dcbe.png"><img src="https://img.gejiba.com/images/25bac7c539582cb01ade7d64c8f935a5.png" alt="25bac7c539582cb01ade7d64c8f935a5.png"></p><p>· 选择文件并追加到FormData中：<img src="https://img.gejiba.com/images/dc8a0adfb9297336d5e0218ebf1fc4e6.png" alt="dc8a0adfb9297336d5e0218ebf1fc4e6.png"></p><p>· 实现上传文件的功能：<img src="https://img.gejiba.com/images/9354540f5a0d35d685a397199e6a3690.png" alt="9354540f5a0d35d685a397199e6a3690.png"><img src="https://img.gejiba.com/images/b1c7bbd832a81012a6720778b5749dd8.png" alt="b1c7bbd832a81012a6720778b5749dd8.png"><img src="https://img.gejiba.com/images/e9b12eca48fb6dabd175fc4794090233.png" alt="e9b12eca48fb6dabd175fc4794090233.png"><img src="https://img.gejiba.com/images/1f28731df8f5c8e63d6eccf6eb3430a6.png" alt="1f28731df8f5c8e63d6eccf6eb3430a6.png"><img src="https://img.gejiba.com/images/8dba8ac8b7d7eaad708ae7c40e88735e.png" alt="8dba8ac8b7d7eaad708ae7c40e88735e.png"></p><p>· XHR计算文件上传的进度：<img src="https://img.gejiba.com/images/eeeef3b191dfc2654ee1d7324f5209e7.png" alt="eeeef3b191dfc2654ee1d7324f5209e7.png"></p><p>​    2.样式需要到框架文档中复制粘贴<img src="https://img.gejiba.com/images/306d6ef8c29c9cde677d4a271d4fcaea.png" alt="306d6ef8c29c9cde677d4a271d4fcaea.png"><a href="https://img.gejiba.com/image/estwO"><img src="https://img.gejiba.com/images/e4d798aacfbd1eda2fd85fa1b1d90e90.png" alt="e4d798aacfbd1eda2fd85fa1b1d90e90.png"></a></p><p>· jQuery实现文件上传：<img src="https://img.gejiba.com/images/8a3944195c5c59466bcfdfc479d88a2e.png" alt="8a3944195c5c59466bcfdfc479d88a2e.png"><img src="https://img.gejiba.com/images/cfb5abeb9aeefc6ba1e42d75c4028522.png" alt="cfb5abeb9aeefc6ba1e42d75c4028522.png"><img src="https://img.gejiba.com/images/52841186ac951290c7624723e7adb0ba.png" alt="52841186ac951290c7624723e7adb0ba.png"><img src="https://img.gejiba.com/images/62371173b932ed8e91dcf08d9b3670d6.png" alt="62371173b932ed8e91dcf08d9b3670d6.png"></p><p>· jQuery实现loading效果：</p><p>· 了解如何基于axios发起Ajax请求：<img src="https://img.gejiba.com/images/b58006ea5652053c852a2a8e3dde9f6d.png" alt="b58006ea5652053c852a2a8e3dde9f6d.png"><img src="https://img.gejiba.com/images/cb94bdfa19065a6701d6690d687bb2aa.png" alt="cb94bdfa19065a6701d6690d687bb2aa.png"></p><p>-》axios是专注于网络数据请求的库，简单易用，更轻量级。</p><p>-》<img src="https://img.gejiba.com/images/21731eb6b7ca287fa5e3cc1a464b79cc.png" alt="21731eb6b7ca287fa5e3cc1a464b79cc.png"><img src="https://img.gejiba.com/images/9c0881adb63cfdbf492902697d22f586.png" alt="9c0881adb63cfdbf492902697d22f586.png"><img src="https://img.gejiba.com/images/5e2292ea7d998b2d9eb79af0cbfa433f.png" alt="5e2292ea7d998b2d9eb79af0cbfa433f.png"><a href="https://img.gejiba.com/image/es1wg"><img src="https://img.gejiba.com/images/b16a26f659bdcf31b25f64714d1fc0b3.png" alt="b16a26f659bdcf31b25f64714d1fc0b3.png"></a><a href="https://img.gejiba.com/image/esGK5"><img src="https://img.gejiba.com/images/335eaef20981dd103f05c06022cf0287.png" alt="335eaef20981dd103f05c06022cf0287.png"></a></p><p>· 同源：如果俩个页面的协议，域名和端口都相同，则俩个页面具有相同的源。</p><p>· 同源策略：是浏览器提供的一个安全功能。</p><p>· 跨域：俩个URL的协议，域名，端口不一致。出现跨域原因：浏览器的同源策略不允许非同源的URL之间进行资源的交互。<img src="https://img.gejiba.com/images/d402ef981884eb0deba286552ac5b78c.png" alt="d402ef981884eb0deba286552ac5b78c.png"><img src="https://img.gejiba.com/images/e23b123d88d905bb18c3c86ef100ccda.png" alt="e23b123d88d905bb18c3c86ef100ccda.png"></p><p>· JSONP：是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。<img src="https://img.gejiba.com/images/7f2adf4f0b7d3786631b3a160da3a9d9.png" alt="7f2adf4f0b7d3786631b3a160da3a9d9.png"></p><p>· jQuery中的JSONP函数：<img src="https://img.gejiba.com/images/671941a05c8121f3379e34487e3d1851.png" alt="671941a05c8121f3379e34487e3d1851.png"><img src="https://img.gejiba.com/images/ca6916c4e3a90aea944a09cc79b8b8d1.png" alt="ca6916c4e3a90aea944a09cc79b8b8d1.png"><img src="https://img.gejiba.com/images/905323fb3a92ea1f9caa3d173b15eb10.png" alt="905323fb3a92ea1f9caa3d173b15eb10.png"></p><p>· 防抖策略：当事件被触发后，延迟N秒后再执行回调，如果在这N秒内事件又被触发，则重新计时。<strong>输入框</strong><img src="https://img.gejiba.com/images/cdb601488f4b1d0f7071534b7220aea8.png" alt="cdb601488f4b1d0f7071534b7220aea8.png"><img src="https://img.gejiba.com/images/67465091cc7025d8f9bb811f32375692.png" alt="67465091cc7025d8f9bb811f32375692.png"></p><p>· 节流策略：可以减少一段时间内事件的触发频率</p><p><img src="https://img.gejiba.com/images/305542b722994b3e1af6a57fc1ca9205.png" alt="305542b722994b3e1af6a57fc1ca9205.png"></p><p>· 通信：信息的转递和交换。三要素：主体，内容，方式</p><p>· 通信协议：客户端与服务器之间要实现网页内容的传输，则通信的双方必须遵守网页内容的传输协议。其中 ，网页内容又叫超文本，因此网页内容的传输协议又叫<strong>超文本传输协议</strong>，简称<strong>HTTP协议</strong>。<img src="https://img.gejiba.com/images/15fa14af167e12396d7f7392d00a4251.png" alt="15fa14af167e12396d7f7392d00a4251.png"></p><p>· HTTP请求消息：客户端发起的请求叫HTTP请求，客户端发送到服务器的消息，叫HTTP请求信息，又叫HTTP请求报文。</p><p>-》组成部分：请求行，请求头部，空行，请求体<img src="https://img.gejiba.com/images/f3298a6985f4e97ffe5135f9b17f2eae.png" alt="f3298a6985f4e97ffe5135f9b17f2eae.png"></p><p>-》1.请求行：请求方式，URL，HTTP协议版本，他们之间用空格隔开<img src="https://img.gejiba.com/images/5a20c9565a740b2800b3247173f26177.png" alt="5a20c9565a740b2800b3247173f26177.png"></p><p>-》2.请求头部：用来描述客户端的基本信息，从而把客户端相关的信息告知服务器。<strong>由多行键、值对组成，每行的键和值之间用英文的冒号分隔</strong></p><p>相关描述文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers![7258311a5c5312ddb6a192da80240bc0.png](https://img.gejiba.com/images/7258311a5c5312ddb6a192da80240bc0.png)![c4afe38dea3ab589e4498bbab3b9099c.png](https://img.gejiba.com/images/c4afe38dea3ab589e4498bbab3b9099c.png)">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers![7258311a5c5312ddb6a192da80240bc0.png](https://img.gejiba.com/images/7258311a5c5312ddb6a192da80240bc0.png)![c4afe38dea3ab589e4498bbab3b9099c.png](https://img.gejiba.com/images/c4afe38dea3ab589e4498bbab3b9099c.png)</a></p><p>-》3.空行：通知服务器请求头部至此结束。</p><p>请求消息中的空行，用来分隔请求头部和请求体。<img src="https://img.gejiba.com/images/21d5614a7bf62314fb99b9f5e5d2a20c.png" alt="21d5614a7bf62314fb99b9f5e5d2a20c.png"></p><p>-》4.请求体：存放是要通过POSt方式提交到服务器的数据。<img src="https://img.gejiba.com/images/5db42a1f45090f7c7beea9c02acdfbf0.png" alt="5db42a1f45090f7c7beea9c02acdfbf0.png"></p><p>· HTTP响应消息：服务器响应给客户端的消息内容，也叫响应报文</p><p>-》组成部分：状态行，响应头部，空行，响应体<img src="https://img.gejiba.com/images/22615a726a86df02386e0d213681c7f9.png" alt="22615a726a86df02386e0d213681c7f9.png"></p><p>-》1.状态行：HTTP协议版本，状态码，状态码的描述文本，之间用空格隔开<img src="https://img.gejiba.com/images/88121186bbe85311f186318afc0e86ce.png" alt="88121186bbe85311f186318afc0e86ce.png"></p><p>-》2.响应头部：描述服务器的基本信息。<strong>由多行键值对组成</strong>，每行的键值之间用英文的冒号分隔开。<img src="https://img.gejiba.com/images/5089fbad79ce94fd554ba6eff1475582.png" alt="5089fbad79ce94fd554ba6eff1475582.png"></p><p>-》3.空行：通知客户端响应头部至此结束。分隔响应头部和响应体</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers![f430472536352cbf12f379a5840dd936.png](https://img.gejiba.com/images/f430472536352cbf12f379a5840dd936.png)">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers![f430472536352cbf12f379a5840dd936.png](https://img.gejiba.com/images/f430472536352cbf12f379a5840dd936.png)</a></p><p>-》4.响应体：是服务器响应给客户端的资源内容<img src="https://img.gejiba.com/images/985686947245412cdf67d5f01f72c19e.png" alt="985686947245412cdf67d5f01f72c19e.png"></p><p>· HTTP请求方法：用来表明要对服务器上的资源执行的操作<img src="https://img.gejiba.com/images/0b1dbe491b31d8632912f17163152e2a.png" alt="0b1dbe491b31d8632912f17163152e2a.png"></p><p>·HTTP响应状态码：用来标识响应的状态。</p><p><img src="https://img.gejiba.com/images/6bdc6c0c81a68f1c1527a125c526cc72.png" alt="6bdc6c0c81a68f1c1527a125c526cc72.png"><img src="https://img.gejiba.com/images/e23e9d6ac9a3961ddef26cb34f68c897.png" alt="e23e9d6ac9a3961ddef26cb34f68c897.png"></p><p><img src="https://img.gejiba.com/images/c39c32314b958629ce95f750abf1f2f7.png" alt="c39c32314b958629ce95f750abf1f2f7.png"></p><p><img src="https://img.gejiba.com/images/dbcd2a59415d7ff06b7dafed40d4cde5.png" alt="dbcd2a59415d7ff06b7dafed40d4cde5.png"></p><p><img src="https://img.gejiba.com/images/24a333dcada2ef021a2d87b8c6053c6d.png" alt="24a333dcada2ef021a2d87b8c6053c6d.png"></p><p>· 版本控制：本地版本控制系统》集中化的版本控制系统》分布式版本控制系统</p><p>· Git三个区域：工作区，暂存区，Git仓库</p><p>· Git三种状态：已修改modified,已暂存staged，已提交committed</p><p>· Git工作流程：<img src="https://img.gejiba.com/images/d906bf47443a1a32f5622acffc377eb2.png" alt="d906bf47443a1a32f5622acffc377eb2.png"></p><p>· 配置Git命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置用户信息</span><br><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮件地址&quot;</span><br><span class="line">#查看所有的全局配置项</span><br><span class="line">git config --list --global</span><br><span class="line">#查看指定的全局配置项</span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br><span class="line">#获取帮助信息</span><br><span class="line">git help config</span><br><span class="line">git config -h</span><br></pre></td></tr></table></figure><p>· 获取Git仓库的俩种方式：</p><p>① 将尚未进行版本控制的本地目录转换为Git仓库</p><p>② 从其他服务器克隆一个已存在的GIt仓库</p><p>· 在现有目录中初始化仓库：<img src="https://img.gejiba.com/images/e77bda40b10b2d66d405fb408cb39ac2.png" alt="e77bda40b10b2d66d405fb408cb39ac2.png"></p><p>·  Git文件中的状态：<img src="https://img.gejiba.com/images/a8d1b9b7a2c44736b90c1c4f85c8f9e1.png" alt="a8d1b9b7a2c44736b90c1c4f85c8f9e1.png"><img src="https://img.gejiba.com/images/4c590b1d43174367d21b07bb599ed63f.png" alt="4c590b1d43174367d21b07bb599ed63f.png"><img src="https://img.gejiba.com/images/2ceb9cc18ff41923d94f0058be1a413f.png" alt="2ceb9cc18ff41923d94f0058be1a413f.png"></p><p><img src="https://img.gejiba.com/images/9bf9e40d3fd8a7df2742a4828cbe34c6.png" alt="9bf9e40d3fd8a7df2742a4828cbe34c6.png"></p><p>· Git跟踪新文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add 文件名.文件后缀</span><br><span class="line">#显示文件状态</span><br><span class="line">git status</span><br><span class="line">#以精简方式显示</span><br><span class="line">git status -s</span><br></pre></td></tr></table></figure><p>· Git提交更新文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;提交内容的描述&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img.gejiba.com/images/530c7ecc91b320204735424aa4af29ff.png" alt="530c7ecc91b320204735424aa4af29ff.png"></p><p>· Git对已提交文件进行修改：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git status -s</span><br></pre></td></tr></table></figure><p><img src="https://img.gejiba.com/images/b8790a9d192f207901c9792936377d02.png" alt="b8790a9d192f207901c9792936377d02.png"></p><p>· 暂存已修改的文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="https://img.gejiba.com/images/74da112f2d8021752fdbc63e1ab95972.png" alt="74da112f2d8021752fdbc63e1ab95972.png"></p><p>· <strong>撤销对文件的修改</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -- 文件名.文件后缀</span><br></pre></td></tr></table></figure><p><img src="https://img.gejiba.com/images/9117ef58a9f547c5e6a1ce3671e86e08.png" alt="9117ef58a9f547c5e6a1ce3671e86e08.png"></p><p>· 操作暂存区的文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#向暂存区中一次性添加多个文件</span><br><span class="line">git add .</span><br><span class="line">#取消暂存的文件</span><br><span class="line">git reset HEAD 要移除的文件名称</span><br><span class="line">#跳过使用暂存区域</span><br><span class="line">git commit -a -m &quot;描述消息&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img.gejiba.com/images/393ab5e028271da48bf6467916744c90.png" alt="393ab5e028271da48bf6467916744c90.png"></p><p>· 移除文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#从git仓库和工作区中同时移除index.js文件</span><br><span class="line">git rm -f index.js</span><br><span class="line">#只从git仓库中移除index.css，但保留工作区中的index.css文件</span><br><span class="line">git rm --cached index.css</span><br></pre></td></tr></table></figure><p>· Git忽略文件：<img src="https://img.gejiba.com/images/028d48f277c0b170afcd019009c2850f.png" alt="028d48f277c0b170afcd019009c2850f.png"><img src="https://img.gejiba.com/images/1f94fc96aeec5bf39730444926e83225.png" alt="1f94fc96aeec5bf39730444926e83225.png"><img src="https://img.gejiba.com/images/1325a2374ffad8a52d58215590bdf35f.png" alt="1325a2374ffad8a52d58215590bdf35f.png"></p><p>· 提交历史：<img src="https://img.gejiba.com/images/be037c334df4d4348e0b8066557e44f4.png" alt="be037c334df4d4348e0b8066557e44f4.png"></p><p>· 回退到指定的版本：<img src="https://img.gejiba.com/images/0caa5c0ea066e8ad1280b6ac14af9ce2.png" alt="0caa5c0ea066e8ad1280b6ac14af9ce2.png"></p><p>· 五种开源许可协议：<a href="https://img.gejiba.com/image/eGj3g"><img src="https://img.gejiba.com/images/56278e02e3f362924c8d152d88b408f4.png" alt="56278e02e3f362924c8d152d88b408f4.png"></a></p><p>· 开源项目托管平台：<img src="https://img.gejiba.com/images/0cf14cd06359db355289792c28be74cc.png" alt="0cf14cd06359db355289792c28be74cc.png"></p><p>· 远程仓库的俩种访问方式：<img src="https://img.gejiba.com/images/0a8fc983dd1d9de3805f597d6fd4ddac.png" alt="0a8fc983dd1d9de3805f597d6fd4ddac.png"></p><p>· 基于HTTPS将本地仓库上传到Github：</p><p>（需在Github上建立一个空白仓库）<img src="https://img.gejiba.com/images/5530e43fa1e11ce4aa33ec1680891148.png" alt="5530e43fa1e11ce4aa33ec1680891148.png"></p><p>· git push命令作用：第一次推送到远程仓库用：git push -u origin master;后续就可以直接用：git push</p><p>· 配置SSH并将远程仓库克隆到本地：<img src="https://img.gejiba.com/images/e094756b8043953950c3e77e5b122e47.png" alt="e094756b8043953950c3e77e5b122e47.png"><img src="https://img.gejiba.com/images/22824f5b3e687b927d3e7f28b5527977.png" alt="22824f5b3e687b927d3e7f28b5527977.png"><img src="https://img.gejiba.com/images/d41e24c1372b8cce961aec16c4573448.png" alt="d41e24c1372b8cce961aec16c4573448.png"><img src="https://img.gejiba.com/images/5ebf24b0e00cad6d6d4c47bb8b08c97c.png" alt="5ebf24b0e00cad6d6d4c47bb8b08c97c.png"></p><p><img src="https://img.gejiba.com/images/83f6bb559411995aa30019a0d1731269.png" alt="83f6bb559411995aa30019a0d1731269.png"></p><p><img src="https://img.gejiba.com/images/4de9e1dffc3f897ac96dc048f2aa5c76.png" alt="4de9e1dffc3f897ac96dc048f2aa5c76.png"></p><p>· master主分支：在初始化本地Git仓库的时候，Git默认已经帮我们创建了一个名字叫做master的主分支。<strong>主要用来保存和记录整个项目已完成的功能代码</strong>，因此不允许程序员直接在master分子上修改代码。</p><p>· 功能分支：指的是专门用来开发新功能的分支，是临时从master主分支上分叉出来的，当新功能开发且测试完毕后，最终需要合并到master主分支上</p><p>· 查看分支列表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>注意：分支名字前面的*号表示当前所处的分支</p><p>· 创建新分支：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch 分支名称</span><br></pre></td></tr></table></figure><p><img src="https://img.gejiba.com/images/39d218921a804d797e28cec67b867c2e.png" alt="39d218921a804d797e28cec67b867c2e.png"></p><p>· 切换分支：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout 分支名称</span><br></pre></td></tr></table></figure><p><img src="https://img.gejiba.com/images/e526589e2c790db69188a904848dc04f.png" alt="e526589e2c790db69188a904848dc04f.png"></p><p>· 分支的快速创建并切换：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b 分支名称</span><br></pre></td></tr></table></figure><p><img src="https://img.gejiba.com/images/330225bebb2380d8cface4144760647d.png" alt="330225bebb2380d8cface4144760647d.png"></p><p>· 合并分支：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge login</span><br></pre></td></tr></table></figure><p><img src="https://img.gejiba.com/images/37773e36b720bfbd315fc9913cf5c7e7.png" alt="37773e36b720bfbd315fc9913cf5c7e7.png"></p><p>· 删除分支：要先跳到主分支上，再删除分支（不能在要删除的分支上删除）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d 分支名称</span><br></pre></td></tr></table></figure><p>· 遇到冲突时的分支合并：<img src="https://img.gejiba.com/images/d737ab49d869174594278f33a49f0ce6.png" alt="d737ab49d869174594278f33a49f0ce6.png"></p><p>· 将本地分支推送到远程仓库：<img src="https://img.gejiba.com/images/b441fae79fa1dd27a54b26507d315b4a.png" alt="b441fae79fa1dd27a54b26507d315b4a.png"></p><p>· 查看远程仓库中的所有分支列表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show 远程仓库名称</span><br></pre></td></tr></table></figure><p>· 跟踪分支：从远程仓库中，把远程分支下载到本地仓库中<img src="https://img.gejiba.com/images/6086b3be15aed695ca9586d5487d01f2.png" alt="6086b3be15aed695ca9586d5487d01f2.png"></p><p>· 拉取远程分支的最新代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>· 删除远程分支：</p><p><img src="https://img.gejiba.com/images/1a504ef85a62eb3cf831e8ab91658efe.png" alt="1a504ef85a62eb3cf831e8ab91658efe.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶</title>
      <link href="/2022/04/01/JavaScrip%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/04/01/JavaScrip%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-4-1"><a href="#2022-4-1" class="headerlink" title="2022.4.1"></a>2022.4.1</h2><p>· JS的组成：<a href="https://imgtu.com/i/q5MTAA"><img src="https://s1.ax1x.com/2022/04/01/q5MTAA.png" alt="q5MTAA.png"></a></p><p>· API（应用程序编程接口）：简单理解就是，给程序员提供的一种工具，以便能更轻松的实现想要完成的功能。</p><p>· Web API：是<strong>浏览器</strong>提供的一套操作<strong>浏览器功能</strong>和<strong>页面元素</strong>的API。</p><p>?    MDN:<a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p><p>· 获取元素：1.根据ID获取：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element=<span class="built_in">document</span>.getElementById(id);<span class="comment">//没有s，element</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/q5MHht"><img src="https://s1.ax1x.com/2022/04/01/q5MHht.png" alt="q5MHht.png"></a></p><p>2.根据标签名获取：返回对象的集合，<strong>所以想要操作里面的元素就需要遍历；得到元素对象是动态的</strong>；<em>父元素必须是单个对象（必须指明是哪一个元素对象），获取的时候不包括父元素自己。</em></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element=<span class="built_in">document</span>.getElemensByTagName(<span class="string">&#x27;标签名&#x27;</span>);</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/q5MOc8"><img src="https://s1.ax1x.com/2022/04/01/q5MOc8.png" alt="q5MOc8.png"></a></p><p>3.通过HTML5新增的方法获取：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element=<span class="built_in">document</span>.getElemensByClassName(<span class="string">&#x27;类名&#x27;</span>);<span class="comment">//根据类名返回元素对象集合</span></span><br><span class="line"><span class="keyword">var</span> element=<span class="built_in">document</span>.querySelector(<span class="string">&#x27;选择器&#x27;</span>);<span class="comment">//根据指定选择器返回第一个元素对象</span></span><br><span class="line"><span class="keyword">var</span> element=<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;选择器&#x27;</span>);<span class="comment">//根据指定选择器返回所有元素对象集合</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/q5Mq9P"><img src="https://s1.ax1x.com/2022/04/01/q5Mq9P.png" alt="q5Mq9P.png"></a></p><p>4.特殊元素获取（body，html）：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element=doucument.body;<span class="comment">//返回body元素对象</span></span><br><span class="line"><span class="keyword">var</span> element=<span class="built_in">document</span>.documentElement;<span class="comment">//返回html元素对象</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/q5MI7d"><img src="https://s1.ax1x.com/2022/04/01/q5MI7d.png" alt="q5MI7d.png"></a></p><p>· 事件三要素：（事件：触发—响应机制）</p><p>?    （1）事件源：事件被触发的对象，谁  按钮</p><p>?    （2）事件类型：如何触发，什么事件，比如鼠标点击（onckick），还是鼠标经过，还是键盘按下</p><p>?    （3）事件处理程序：通过一个函数赋值的方式，完成</p><p>· 执行事件过程：（1）获取事件源，（2）绑定事件，注册事件，（3）添加事件处理程序<a href="https://imgtu.com/i/q5ML1f"><img src="https://s1.ax1x.com/2022/04/01/q5ML1f.png" alt="q5ML1f.png"></a></p><p>· 操作元素：（1）修改元素内容：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.innerText=名;<span class="comment">//从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉，不识别html，非标准</span></span><br><span class="line">element.innerHTML=名;<span class="comment">//起始位置到终止位置的全部内容，包括HTML标签，同时保留空格和换行，W3C标准</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/q5MXjS"><img src="https://s1.ax1x.com/2022/04/01/q5MXjS.png" alt="q5MXjS.png"></a></p><p>（2）修改元素属性：src、href、id、alt、title<a href="https://imgtu.com/i/q5Mvng"><img src="https://s1.ax1x.com/2022/04/01/q5Mvng.png" alt="q5Mvng.png"></a></p><p>（3）修改表单属性：type、value、checked、selected、disabled<a href="https://imgtu.com/i/q5MxBQ"><img src="https://s1.ax1x.com/2022/04/01/q5MxBQ.png" alt="q5MxBQ.png"></a></p><p>（4）修改样式属性： <em>1.js里面的样式采取驼峰命名法；js修改style央视操作，产生的行内样式，css权重比较高</em></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element,style=;<span class="comment">//行内样式</span></span><br><span class="line">element.className=;<span class="comment">//类名样式</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/q5Mz7j"><img src="https://s1.ax1x.com/2022/04/01/q5Mz7j.png" alt="q5Mz7j.png"></a></p><p><a href="https://imgtu.com/i/q5Q9Nn"><img src="https://s1.ax1x.com/2022/04/01/q5Q9Nn.png" alt="q5Q9Nn.png"></a></p><p>·     显示隐藏文本框内容：获得焦点onfocus、失去焦点onblur                                                                                                                                                                                                                                                                </p><p><a href="https://imgtu.com/i/q5QpAs"><img src="https://s1.ax1x.com/2022/04/01/q5QpAs.png" alt="q5QpAs.png"></a></p><h2 id="2022-4-2"><a href="#2022-4-2" class="headerlink" title="2022.4.2"></a>2022.4.2</h2><p>· 排他思想：如果有同一组元素，我们要某一个元素实现某种样式，需要用到循环的排他思想算法：（1）所有元素全部清除样式（干掉其他人）（2）给当前元素设置样式（留下我自己）（3）注意顺序不能颠倒！<a href="https://imgtu.com/i/qHp7HP"><img src="https://s1.ax1x.com/2022/04/03/qHp7HP.png" alt="qHp7HP.png"></a></p><p>· 表格隔行变色：鼠标经过事件onmouseover   鼠标离开事件onmouseout<a href="https://imgtu.com/i/qHpTBt"><img src="https://s1.ax1x.com/2022/04/03/qHpTBt.png" alt="qHpTBt.png"></a></p><p>· 表单全选和取消全选：<a href="https://imgtu.com/i/qHp5jA"><img src="https://s1.ax1x.com/2022/04/03/qHp5jA.png" alt="qHp5jA.png"></a></p><h2 id="2022-4-3"><a href="#2022-4-3" class="headerlink" title="2022.4.3"></a>2022.4.3</h2><p>· 获得元素（自定义）的属性值：（1）element.属性名；获取内置属性值（元素本身自带的属性）（2）element.getAttribute(‘属性’)；主要获得自定义的属性（标准）我们程序员自定义的属性<a href="https://imgtu.com/i/qq03WR"><img src="https://s1.ax1x.com/2022/04/04/qq03WR.png" alt="qq03WR.png"></a></p><p>· 设置自定义属性值：（1）element.属性=’值’;设置内置属性值（2）element.setAttribute(‘属性’,’值’);主要设置自定义是属性（标准）<a href="https://imgtu.com/i/qq01Y9"><img src="https://s1.ax1x.com/2022/04/04/qq01Y9.png" alt="qq01Y9.png"></a>· 移除自定义属性值：removeAttribute(‘属性’)</p><p>·<strong>tab栏切换布局分析</strong><a href="https://imgtu.com/i/qq0lFJ"><img src="https://s1.ax1x.com/2022/04/04/qq0lFJ.png" alt="qq0lFJ.png"></a></p><p>· H5自定义属性：data-开头作为属性名并且赋值（1）兼容性获取：element.getAttribute(‘data-index’);</p><p>(2)H5新增：element.dataset.index或者element.dataset[‘index’] <em>ie11才开始支持</em><a href="https://imgtu.com/i/qq0JQx"><img src="https://s1.ax1x.com/2022/04/04/qq0JQx.png" alt="qq0JQx.png"></a></p><p><a href="https://imgtu.com/i/qq0GS1"><img src="https://s1.ax1x.com/2022/04/04/qq0GS1.png" alt="qq0GS1.png"></a></p><h2 id="2022-4-4"><a href="#2022-4-4" class="headerlink" title="2022.4.4"></a>2022.4.4</h2><p>· 节点：网页中的所有内容都是节点（标签，属性，文本，注释等），在DOM中，节点使用<strong>node</strong>来表示</p><p>?    -》    优点：利用节点层级关系获取元素，逻辑关系更强，操作更简便，但兼容性稍差</p><p>?    -》基本类型：nodeType（节点类型），nodeName（节点名称），nodeValue（节点值）；<a href="https://imgtu.com/i/qOXXLR"><img src="https://s1.ax1x.com/2022/04/05/qOXXLR.png" alt="qOXXLR.png"></a></p><p>· 节点操作：（1）父节点操作：<strong>node.parentNode</strong>;parentNode属性可返回某节点的父节点，注意是最近的一个父节点；如果指定的节点没有父节点则返回null<a href="https://imgtu.com/i/qOXxdx"><img src="https://s1.ax1x.com/2022/04/05/qOXxdx.png" alt="qOXxdx.png"></a></p><p>（2）子节点操作：<strong>parentNode.childNodes</strong>（标准）;返回包含指定节点的子节点的集合，该集合为即时更新的集合；<a href="https://imgtu.com/i/qOXve1"><img src="https://s1.ax1x.com/2022/04/05/qOXve1.png" alt="qOXve1.png"></a></p><p><strong>parentNode.children</strong>(非标准)；是一个只读属性，返回所有的子元素节点;它只返回子元素节点，其余节点不返回（<strong>重点</strong>);虽然是非标准，但兼容性好，可放心使用</p><h2 id="2022-4-5"><a href="#2022-4-5" class="headerlink" title="2022.4.5"></a>2022.4.5</h2><p>（3）第一个子节点：<strong>parentNode.firstChild</strong></p><p>返回第一个子节点，找不到则返回null，也是包括所有的节点。</p><p><strong>parentNode.firstElementChild</strong></p><p>返回第一个子元素节点，找不到则返回null</p><p>（4）最后一个子节点：<strong>parentNode.lastChild</strong></p><p>返回最后一个子节点，找不到则返回null，也是包括所有的节点（ie9以上才支持）</p><p><strong>parentNode.lastElementChild</strong></p><p>返回最后一个子元素节点，找不到则返回null（ie9以上才支持）<a href="https://imgtu.com/i/qXAnk4"><img src="https://s1.ax1x.com/2022/04/05/qXAnk4.png" alt="qXAnk4.png"></a></p><p>· 兄弟节点：</p><p>（1）<strong>node.nextSibling</strong></p><p>返回当前元素的下一个兄弟节点，找不到则返回null，也是包含所有的节点</p><p>（2）<strong>node.previousSibling</strong></p><p>返回当前元素的下一个兄弟节点，找不到则返回null，也是包含所有的节点</p><p>（3）<strong>node.nextElementSibling</strong></p><p>返回当前元素的下一个兄弟节点，找不到则返回null，ie9以上支持</p><p>（4）<strong>node.previousElementSibling</strong></p><p>返回当前元素的下一个兄弟节点，找不到则返回null,ie9以上支持</p><p>· 创建节点：<strong>document.createElement(‘tagName’)</strong></p><p>由tagName指定的HTML元素，因为这些元素原先不存在，是根据我们的需求动态生成的，称为<strong>动态创建元素节点</strong></p><p>· 添加节点：（1）<strong>node.appendChild(child)</strong></p><p>方法将一个节点添加到指定父节点的子节点列表末尾，类似于css里的after伪元素</p><p>（2）<strong>node.insertBefore(child,指定元素)</strong></p><p>方法将一个节点添加到父节点的指定子节点前面，类似css里的before伪元素<a href="https://imgtu.com/i/qXAe7F"><img src="https://s1.ax1x.com/2022/04/05/qXAe7F.png" alt="qXAe7F.png"></a></p><p>· 删除节点：<strong>node.removeChild(child)</strong></p><p>方法从DOM中删除一个子节点，返回删除的节点。</p><p><a href="https://imgtu.com/i/qXAZ0U"><img src="https://s1.ax1x.com/2022/04/05/qXAZ0U.png" alt="qXAZ0U.png"></a></p><h2 id="2022-4-6"><a href="#2022-4-6" class="headerlink" title="2022.4.6"></a>2022.4.6</h2><p>· 复制节点（克隆节点）：**node.cloneNode()**方法返回调用该方法的节点的一个副本<a href="https://imgtu.com/i/qvTwWQ"><img src="https://s1.ax1x.com/2022/04/06/qvTwWQ.png" alt="qvTwWQ.png"></a></p><p>· 了解：<a href="https://imgtu.com/i/qvTdJg"><img src="https://s1.ax1x.com/2022/04/06/qvTdJg.png" alt="qvTdJg.png"></a></p><p>· DOM（文档对象模型）：是W3C组织推荐的处理可扩展标记语言的编程接口。（总结之前创建，增删改查，属性操作，事件操作）</p><p>· 注册事件（绑定事件）：给元素添加事件。俩种方式：传统方式、方法监听注册方式。<a href="https://imgtu.com/i/qvTNo8"><img src="https://s1.ax1x.com/2022/04/06/qvTNo8.png" alt="qvTNo8.png"></a><a href="https://imgtu.com/i/qvTaFS"><img src="https://s1.ax1x.com/2022/04/06/qvTaFS.png" alt="qvTaFS.png"></a><a href="https://imgtu.com/i/qvT0zj"><img src="https://s1.ax1x.com/2022/04/06/qvT0zj.png" alt="qvT0zj.png"></a></p><p>· attachEvent事件监听方式：<a href="https://imgtu.com/i/qvTDQs"><img src="https://s1.ax1x.com/2022/04/06/qvTDQs.png" alt="qvTDQs.png"></a></p><p><a href="https://imgtu.com/i/qvTryn"><img src="https://s1.ax1x.com/2022/04/06/qvTryn.png" alt="qvTryn.png"></a></p><h2 id="2022-4-7"><a href="#2022-4-7" class="headerlink" title="2022.4.7"></a>2022.4.7</h2><p>· 删除事件（解绑事件）：1.传统方式：<strong>eventTarget.onclick=null;</strong></p><p>2.方法监听注册方法：<strong>①eventTarget.removeEventListener(type,listerner[,useCapture]);</strong></p><p><strong>②eventTarget.datachEvent(eventNameWithOn,callback);</strong><a href="https://imgtu.com/i/LpXd4s"><img src="https://s1.ax1x.com/2022/04/08/LpXd4s.png" alt="LpXd4s.png"></a></p><p>· DOM事件流：其描述的是从页面中接收事件的顺序；事件发生时会在元素节点之间按照特定的顺序传播。<a href="https://imgtu.com/i/LpXaNj"><img src="https://s1.ax1x.com/2022/04/08/LpXaNj.png" alt="LpXaNj.png"></a></p><p>-》三个阶段：1.捕获阶段；2.当前目标阶段；3.冒泡阶段<a href="https://imgtu.com/i/LpXUEQ"><img src="https://s1.ax1x.com/2022/04/08/LpXUEQ.png" alt="LpXUEQ.png"></a></p><p>· 事件对象：event对象代表事件的状态，如键盘按键的状态，鼠标垫位置，鼠标按钮的状态。即事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象event<a href="https://imgtu.com/i/LpXB3q"><img src="https://s1.ax1x.com/2022/04/08/LpXB3q.png" alt="LpXB3q.png"></a></p><p>· 事件对象的常见属性和方法：<a href="https://imgtu.com/i/LpXDg0"><img src="https://s1.ax1x.com/2022/04/08/LpXDg0.png" alt="LpXDg0.png"></a></p><p>· target和this的区别：<a href="https://imgtu.com/i/LpXyuT"><img src="https://s1.ax1x.com/2022/04/08/LpXyuT.png" alt="LpXyuT.png"></a></p><p>· 默认阻止行为：<a href="https://imgtu.com/i/LpXRUJ"><img src="https://s1.ax1x.com/2022/04/08/LpXRUJ.png" alt="LpXRUJ.png"></a></p><p>· 阻止事件冒泡：①标准写法：利用事件对象里面的stopPropagation() <strong>e.stopPropagation()</strong></p><p>②非标准写法：IE678 利用事件对象cancelBubble属性<a href="https://imgtu.com/i/LpX6DU"><img src="https://s1.ax1x.com/2022/04/08/LpX6DU.png" alt="LpX6DU.png"></a></p><p>· 事件委托（事件代理）：<strong>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。（面试会问）</strong>作用是只操作一次DOM，提高了程序的性能。<a href="https://imgtu.com/i/LpX2E4"><img src="https://s1.ax1x.com/2022/04/08/LpX2E4.png" alt="LpX2E4.png"></a></p><p>· 常用鼠标事件：<a href="https://imgtu.com/i/LpXcbF"><img src="https://s1.ax1x.com/2022/04/08/LpXcbF.png" alt="LpXcbF.png"></a><a href="https://imgtu.com/i/LpX5gx"><img src="https://s1.ax1x.com/2022/04/08/LpX5gx.png" alt="LpX5gx.png"></a></p><p>· 禁止选中文字和禁止鼠标右键菜单：<a href="https://imgtu.com/i/LpXW59"><img src="https://s1.ax1x.com/2022/04/08/LpXW59.png" alt="LpXW59.png"></a></p><p>· 获得鼠标在页面的坐标：<a href="https://imgtu.com/i/LpX0Cn"><img src="https://s1.ax1x.com/2022/04/08/LpX0Cn.jpg" alt="LpX0Cn.jpg"></a></p><p>· 常用键盘事件：<a href="https://imgtu.com/i/LpXhCR"><img src="https://s1.ax1x.com/2022/04/08/LpXhCR.png" alt="LpXhCR.png"></a></p><p>· keyCode判断用户按下了哪个键：<a href="https://imgtu.com/i/LpX481"><img src="https://s1.ax1x.com/2022/04/08/LpX481.png" alt="LpX481.png"></a><a href="https://imgtu.com/i/LpXIv6"><img src="https://s1.ax1x.com/2022/04/08/LpXIv6.png" alt="LpXIv6.png"></a></p><p>· BOM（浏览器对象模型）：它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window。window对象是浏览器的顶级对象，它具有双重角色（接口、全局对象）。<a href="https://imgtu.com/i/LpXTKK"><img src="https://s1.ax1x.com/2022/04/08/LpXTKK.png" alt="LpXTKK.png"></a></p><h2 id="2022-4-8"><a href="#2022-4-8" class="headerlink" title="2022.4.8"></a>2022.4.8</h2><p>· 页面（窗口）加载事件：当文档内容完全加载完成会触发该事件（包括图像、脚本文件、CSS、文件等），就调用的处理函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;load&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/L9xiW9"><img src="https://s1.ax1x.com/2022/04/08/L9xiW9.png" alt="L9xiW9.png"></a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/L9xFzR"><img src="https://s1.ax1x.com/2022/04/08/L9xFzR.png" alt="L9xFzR.png"></a></p><p>· 调整窗口大小事件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onresize=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/L9xPJJ"><img src="https://s1.ax1x.com/2022/04/08/L9xPJJ.png" alt="L9xPJJ.png"></a></p><p>· 定时器：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.setTimeout(调用函数,延时时间的毫秒数);</span><br><span class="line"><span class="built_in">window</span>.setInterval();同上</span><br></pre></td></tr></table></figure><p> <a href="https://imgtu.com/i/L9xCi4"><img src="https://s1.ax1x.com/2022/04/08/L9xCi4.png" alt="L9xCi4.png"></a><a href="https://imgtu.com/i/L9xEsx"><img src="https://s1.ax1x.com/2022/04/08/L9xEsx.png" alt="L9xEsx.png"></a>[<img src="https://s1.ax1x.com/2022/04/08/L9xVL6.png" alt="L9xVL6.png"><a href="https://imgtu.com/i/L9xAQ1"><img src="https://s1.ax1x.com/2022/04/08/L9xAQ1.png" alt="L9xAQ1.png"></a>](<a href="https://imgtu.com/i/L9xVL6">https://imgtu.com/i/L9xVL6</a>)</p><p>· **setTimeout()**回调函数：</p><p>· 停止setTimeout()定时器：   </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.clearTimeout(timeoutID)<span class="comment">//win可省略，括号里是定时器标识符</span></span><br></pre></td></tr></table></figure><p>· 清除setIterval()定时器：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.clearInterval(intervalID);<span class="comment">//win可省，括号里是定时器标识符</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/L9xmdO"><img src="https://s1.ax1x.com/2022/04/08/L9xmdO.png" alt="L9xmdO.png"></a></p><p>· <strong>this指向问题：</strong>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this指向谁，一般this的最终指向的是那个调用它的对象</p><p>?    1.全局作用域或者普通函数中this指向全局对象window（注意定时器里的this指向window）</p><p>?    2.方法调用中谁调用this，就指向那个调用它的对象</p><p>?    3.构造函数中this指向构造函数的实例</p><p>· JS执行机制 ：（单线程：同一时间只能做一件事）现在可多线程的<a href="https://imgtu.com/i/L9xeeK"><img src="https://s1.ax1x.com/2022/04/08/L9xeeK.png" alt="L9xeeK.png"></a><a href="https://imgtu.com/i/L9xMJH"><img src="https://s1.ax1x.com/2022/04/08/L9xMJH.png" alt="L9xMJH.png"></a></p><p>-》同步：前一个任务结束后在执行后一个任务，程序的执行顺序与任务的排序顺序是一致的、同步的。</p><p>-》异步：在做这件事的同时，还可以处理其他事情。<a href="https://imgtu.com/i/L9xnoD"><img src="https://s1.ax1x.com/2022/04/08/L9xnoD.png" alt="L9xnoD.png"></a></p><p>· location对象：window对象给我们提供一个location属性用于获取或设置窗体的URL，并且可以用于解析URL，这个属性返回的一个对象就是location对象。</p><p>属性和方法：<a href="https://imgtu.com/i/L9xKFe"><img src="https://s1.ax1x.com/2022/04/08/L9xKFe.png" alt="L9xKFe.png"></a><a href="https://imgtu.com/i/L9x3QI"><img src="https://s1.ax1x.com/2022/04/08/L9x3QI.png" alt="L9x3QI.png"></a></p><p>·URL:统一资源定位符是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL。<a href="https://imgtu.com/i/L9xQWd"><img src="https://s1.ax1x.com/2022/04/08/L9xQWd.png" alt="L9xQWd.png"></a></p><p>· navigator对象：其包含有关浏览器的信息，可判断用户要用哪个终端打开页面，实现跳转</p><p>· history对象：与浏览器历史记录进行交互，该对象包含用户（在浏览器窗口中）访问过的URL。<a href="https://imgtu.com/i/L9x1SA"><img src="https://s1.ax1x.com/2022/04/08/L9x1SA.png" alt="L9x1SA.png"></a></p><p>· 元素偏移量offset：可以动态获得该元素的位置（偏移），大小等。<a href="https://imgtu.com/i/L9x8yt"><img src="https://s1.ax1x.com/2022/04/08/L9x8yt.png" alt="L9x8yt.png"></a></p><p><a href="https://imgtu.com/i/L9xGOP"><img src="https://s1.ax1x.com/2022/04/08/L9xGOP.png" alt="L9xGOP.png"></a></p><p>· offset与style区别：<a href="https://imgtu.com/i/LPWr1e"><img src="https://s1.ax1x.com/2022/04/09/LPWr1e.png" alt="LPWr1e.png"></a></p><p>· 元素可视区client（客户端）系列：用相关属性来获取元素可视区的相关信息，还可以动态获得该元素的边框大小、元素大小等。<a href="https://imgtu.com/i/LPW0fO"><img src="https://s1.ax1x.com/2022/04/09/LPW0fO.png" alt="LPW0fO.png"></a></p><p>· 立即执行函数：不需要调用，立马能够自己执行的函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)();</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;());</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/LPWs6H"><img src="https://s1.ax1x.com/2022/04/09/LPWs6H.png" alt="LPWs6H.png"></a></p><p>· 元素scroll（滚动的）系列属性：可以动态得到该元素的大小、滚动距离等<a href="https://imgtu.com/i/LPWwtK"><img src="https://s1.ax1x.com/2022/04/09/LPWwtK.png" alt="LPWwtK.png"></a><a href="https://imgtu.com/i/LPWDpD"><img src="https://s1.ax1x.com/2022/04/09/LPWDpD.png" alt="LPWDpD.png"></a></p><p>· <strong>三大系列总结</strong>：<a href="https://imgtu.com/i/LPW27t"><img src="https://s1.ax1x.com/2022/04/09/LPW27t.png" alt="LPW27t.png"></a></p><p><a href="https://imgtu.com/i/LPWcnA"><img src="https://s1.ax1x.com/2022/04/09/LPWcnA.png" alt="LPWcnA.png"></a></p><p>· mouseenter和mouseover的区别：<a href="https://imgtu.com/i/LPWg0I"><img src="https://s1.ax1x.com/2022/04/09/LPWg0I.png" alt="LPWg0I.png"></a></p><p>· 动画实现原理：<strong>核心原理：通过定时器setInterval()不断移动盒子位置</strong></p><p>?    1.获取盒子当前位置</p><p>?    2.让盒子在当前位置加上1个移动距离</p><p>?    3.利用定时器不断重复这个操作</p><p>?    4.加一个结束定时器的条件</p><p>?    5.注意此元素需要添加定位，才能使用element.style.left<a href="https://imgtu.com/i/LPWftf"><img src="https://s1.ax1x.com/2022/04/09/LPWftf.png" alt="LPWftf.png"></a></p><p>· 简单动画函数封装：需要传递2个参数，动画对象和移动到的距离<a href="https://imgtu.com/i/LPWWAP"><img src="https://s1.ax1x.com/2022/04/09/LPWWAP.png" alt="LPWWAP.png"></a></p><p>· 动画函数-给不同对象添加不同定时器：当我们不断的点击按钮，这个元素的速度会越来越快，因为开启了太多的定时器；<strong>解决</strong>:r让我们元素只有一个定时器执行，先清除以前的定时器，只保留当前的一个定时器执行</p><p>· 缓慢（让元素运动速度有所变化）动画原理：</p><p>?    1.让盒子每次移动的距离慢慢变小，速度就会慢慢落下来</p><p>?    2.<strong>核心算法</strong>（目标值-现在的位置）/10，作每次移动的距离步长</p><p>?    3.停止的条件：让当前位置等于目标位置就停止定时器</p><p>?     4.<strong>注意步长值需要取整</strong><a href="https://imgtu.com/i/LPW59S"><img src="https://s1.ax1x.com/2022/04/09/LPW59S.png" alt="LPW59S.png"></a></p><p>· 动画函数添加回调函数：（回调函数原理：函数可以作为一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程叫回调）</p><p>· 动画函数封装到单独JS文件里：</p><p>1.单独新建一个JS文件；2.引用JS文件；3.写相关属性</p><p>· 节流阀：防止轮播图按钮连续点击造成播放过快。<a href="https://imgtu.com/i/LPWhh8"><img src="https://s1.ax1x.com/2022/04/09/LPWhh8.png" alt="LPWhh8.png"></a><a href="https://imgtu.com/i/LPWocQ"><img src="https://s1.ax1x.com/2022/04/09/LPWocQ.png" alt="LPWocQ.png"></a></p><p>· 移动端touch（触屏）事件：touch对象代表一个触摸点<a href="https://imgtu.com/i/LPWI1g"><img src="https://s1.ax1x.com/2022/04/09/LPWI1g.png" alt="LPWI1g.png"></a></p><p>· 触摸事件对象（TouchEvent）：<a href="https://imgtu.com/i/LPWTXj"><img src="https://s1.ax1x.com/2022/04/09/LPWTXj.png" alt="LPWTXj.png"></a><a href="https://imgtu.com/i/LPWOA0"><img src="https://s1.ax1x.com/2022/04/09/LPWOA0.png" alt="LPWOA0.png"></a></p><p>· 移动端拖动元素：<a href="https://imgtu.com/i/LPWbBn"><img src="https://s1.ax1x.com/2022/04/09/LPWbBn.png" alt="LPWbBn.png"></a><a href="https://imgtu.com/i/LPWHns"><img src="https://s1.ax1x.com/2022/04/09/LPWHns.png" alt="LPWHns.png"></a></p><p>· click延时解决方案：<a href="https://imgtu.com/i/LPWXNV"><img src="https://s1.ax1x.com/2022/04/09/LPWXNV.png" alt="LPWXNV.png"></a></p><p>· fastclick插件：（JS插件就是JS文件）可解决300ms延迟。GIthub官网：<a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></p><p>· Swiper轮播图插件：<a href="https://www/swiper.com.cn/">https://www/swiper.com.cn/</a></p><p>?    1.引用相关文件；2.按照语法规范使用<a href="https://imgtu.com/i/LPWq7q"><img src="https://s1.ax1x.com/2022/04/09/LPWq7q.png" alt="LPWq7q.png"></a></p><p>· 其他移动端常见插件：</p><p>?    superslide：<a href="http://www.superslide2.com/">http://www.superslide2.com/</a></p><p>?    iscroll： <a href="https://github.com/cubiq/iscroll">https://github.com/cubiq/iscroll</a></p><p>· 本地存储：<a href="https://imgtu.com/i/LPfSc4"><img src="https://s1.ax1x.com/2022/04/09/LPfSc4.png" alt="LPfSc4.png"></a></p><p>（1）<strong>window.sessionStorage</strong><a href="https://imgtu.com/i/LPfpjJ"><img src="https://s1.ax1x.com/2022/04/09/LPfpjJ.png" alt="LPfpjJ.png"></a></p><p>（2）<strong>window.localStorage</strong></p><p><a href="https://imgtu.com/i/LPfCu9"><img src="https://s1.ax1x.com/2022/04/09/LPfCu9.png" alt="LPfCu9.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/2022/03/23/JavaScrip%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/23/JavaScrip%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-3-23"><a href="#2022-3-23" class="headerlink" title="2022.3.23"></a>2022.3.23</h2><p>· JavaScript是一种运行在客户端的脚本语言（不需要编译，运行过程中由js解释器逐行来进行解释并执行），即可做前台，也可做后台。</p><p>· JavaScript的作用：</p><p><a href="https://imgtu.com/i/q8KLIs"><img src="https://s1.ax1x.com/2022/03/24/q8KLIs.png" alt="q8KLIs.png"></a></p><p>· 浏览器执行JS的过程：</p><p><a href="https://imgtu.com/i/q8KvR0"><img src="https://s1.ax1x.com/2022/03/24/q8KvR0.png" alt="q8KvR0.png"></a></p><p>· JS的组成：</p><p><a href="https://imgtu.com/i/q8KXin"><img src="https://s1.ax1x.com/2022/03/24/q8KXin.png" alt="q8KXin.png"></a></p><p>?    · ECMAScript规定了JS的编程语法和基础核心知识</p><p>?    · DOM——文档对象模型</p><p>?    · BOM——浏览器对象模型</p><p>· JS的三种书写位置：1.行内式的js，直接写到元素的内部；</p><p><a href="https://imgtu.com/i/q8KjGq"><img src="https://s1.ax1x.com/2022/03/24/q8KjGq.png" alt="q8KjGq.png"></a></p><p>?    2.内嵌式的js；</p><p><a href="https://imgtu.com/i/q8Kqaj"><img src="https://s1.ax1x.com/2022/03/24/q8Kqaj.png" alt="q8Kqaj.png"></a></p><p>?    3.外部js，script双标签</p><p><a href="https://imgtu.com/i/q8MPZ4"><img src="https://s1.ax1x.com/2022/03/24/q8MPZ4.png" alt="q8MPZ4.png"></a></p><p>· 注释：</p><p><a href="https://imgtu.com/i/q8MpsU"><img src="https://s1.ax1x.com/2022/03/24/q8MpsU.png" alt="q8MpsU.png"></a></p><p>· 输入输出语句：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">prompt(<span class="string">&#x27;输入框&#x27;</span>);</span><br><span class="line">alert(<span class="string">&#x27;弹出警示框，输出的，展示给用户的&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;console控制台输出，程序员调试用的&#x27;</span>);</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/q8M9LF"><img src="https://s1.ax1x.com/2022/03/24/q8M9LF.png" alt="q8M9LF.png"></a></p><p>· 变量：一个存储数据的容器；本质是程序在内存中申请的一块用来存放数据的空间。使用：1.声明变量；2.赋值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名;<span class="comment">//声明变量</span></span><br><span class="line">变量名=数值;<span class="comment">//赋值</span></span><br><span class="line"><span class="keyword">var</span> 变量名=<span class="string">&#x27;字 值&#x27;</span>;</span><br></pre></td></tr></table></figure><p>（1）更新变量：一个变量被重新赋值后，他原来的值就会被覆盖，变量值将以最后一次的值为准</p><p>（2）同时声明多个变量：同时声明多个变量时，只需要写一个var，多个变量名之间用英文逗号隔开</p><p>（3）特殊情况：</p><p><a href="https://imgtu.com/i/q8MidJ"><img src="https://s1.ax1x.com/2022/03/24/q8MidJ.png" alt="q8MidJ.png"></a></p><h2 id="2022-3-24"><a href="#2022-3-24" class="headerlink" title="2022.3.24"></a>2022.3.24</h2><p>· 变量命名规则：尽量不要直接用name作变量名</p><p><a href="https://imgtu.com/i/qJycwD"><img src="https://s1.ax1x.com/2022/03/24/qJycwD.png" alt="qJycwD.png"></a></p><p>· 数据类型：</p><p><a href="https://imgtu.com/i/qJygTe"><img src="https://s1.ax1x.com/2022/03/24/qJygTe.png" alt="qJygTe.png"></a></p><p>1.简单数据类型：①·<em>数字型进制：八进制前加0，十六进制前加0x。</em></p><p><a href="https://imgtu.com/i/qJy6eO"><img src="https://s1.ax1x.com/2022/03/24/qJy6eO.png" alt="qJy6eO.png"></a></p><p>②.字符串型String：</p><p><a href="https://imgtu.com/i/qJyry6"><img src="https://s1.ax1x.com/2022/03/24/qJyry6.png" alt="qJyry6.png"></a></p><p><a href="https://imgtu.com/i/qJysOK"><img src="https://s1.ax1x.com/2022/03/24/qJysOK.png" alt="qJysOK.png"></a></p><p><a href="https://imgtu.com/i/qJyRFH"><img src="https://s1.ax1x.com/2022/03/24/qJyRFH.png" alt="qJyRFH.png"></a></p><p><a href="https://imgtu.com/i/qJy5lt"><img src="https://s1.ax1x.com/2022/03/24/qJy5lt.png" alt="qJy5lt.png"></a></p><p><a href="https://imgtu.com/i/qJy7m8"><img src="https://s1.ax1x.com/2022/03/24/qJy7m8.png" alt="qJy7m8.png"></a></p><p>③布尔型：true=1；false=0</p><p>④一个声明后没有被赋值的变量会有一个默认值undefined（如果进行相连或者相加时，注意结果）</p><p>⑤一个声明变量给null值，里面存的值为空</p><p>· typeof检测变量数据类型</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> 变量名);</span><br></pre></td></tr></table></figure><p><strong>prompt 取过来的值是字符型的</strong></p><p>· 数据类型的转换：</p><p>?    1.转换为字符串型：</p><p><a href="https://imgtu.com/i/qJyI6P"><img src="https://s1.ax1x.com/2022/03/24/qJyI6P.png" alt="qJyI6P.png"></a></p><p><a href="https://imgtu.com/i/qJyoOf"><img src="https://s1.ax1x.com/2022/03/24/qJyoOf.png" alt="qJyoOf.png"></a></p><p>?    2.转换为数字型：</p><p><a href="https://imgtu.com/i/qJyOYj"><img src="https://s1.ax1x.com/2022/03/24/qJyOYj.png" alt="qJyOYj.png"></a></p><p><a href="https://imgtu.com/i/qJyLkQ"><img src="https://s1.ax1x.com/2022/03/24/qJyLkQ.png" alt="qJyLkQ.png"></a></p><p><a href="https://imgtu.com/i/qJyXfs"><img src="https://s1.ax1x.com/2022/03/24/qJyXfs.png" alt="qJyXfs.png"></a></p><p>?    3.转换为布尔型：</p><p><a href="https://imgtu.com/i/qJyxlq"><img src="https://s1.ax1x.com/2022/03/24/qJyxlq.png" alt="qJyxlq.png"></a></p><p><a href="https://imgtu.com/i/qJyvpn"><img src="https://s1.ax1x.com/2022/03/24/qJyvpn.png" alt="qJyvpn.png"></a></p><p>· 算术运算符：+ - * / % ，先乘除后加减，有括号先算括号里面的</p><p>· 表达式：由数字、运算符、变量等组成的式子，且有返回值（把右边的值返回给左边）的</p><p>· 前置递增运算符：先自加，后返回值</p><p><a href="https://imgtu.com/i/qJ6SXV"><img src="https://s1.ax1x.com/2022/03/24/qJ6SXV.png" alt="qJ6SXV.png"></a></p><p>· 后置递增运算符：先返回原值，后自加1，<em>大多使用后置递增、递减，并且代码独占一行</em></p><p><a href="https://imgtu.com/i/qJyz60"><img src="https://s1.ax1x.com/2022/03/24/qJyz60.png" alt="qJyz60.png"></a></p><p><strong>单独使用运行结构相同，与其他代码联用时，执行结果会不同</strong></p><h2 id="2022-3-25"><a href="#2022-3-25" class="headerlink" title="2022.3.25"></a>2022.3.25</h2><p>· 比较运算符：俩个数据进行比较，返回一个布尔值。<strong>单等（=）是赋值，双等（==）是判断，三等（===）是全等</strong></p><p><a href="https://imgtu.com/i/qU5UEj"><img src="https://s1.ax1x.com/2022/03/26/qU5UEj.png" alt="qU5UEj.png"></a></p><p>· 逻辑运算符：进行布尔值运算的运算符，返回值也是布尔值<a href="https://imgtu.com/i/qU5tbQ"><img src="https://s1.ax1x.com/2022/03/26/qU5tbQ.png" alt="qU5tbQ.png"></a></p><p>· 逻辑中断（短路）：当多个表达式（值）时，左边的表达式值可以确定结果时，就不再继续运算右边的表达式的值。</p><p>?    -》逻辑与：表达式1 &amp;&amp; 表达式2</p><p><a href="https://imgtu.com/i/qU5YDg"><img src="https://s1.ax1x.com/2022/03/26/qU5YDg.png" alt="qU5YDg.png"></a></p><p>?    -》逻辑或：表达式1 || 表达式2<a href="https://imgtu.com/i/qU58v8"><img src="https://s1.ax1x.com/2022/03/26/qU58v8.png" alt="qU58v8.png"></a></p><p><strong>后面是0，则返回0</strong></p><p>· 赋值运算符：</p><p><a href="https://imgtu.com/i/qU5JKS"><img src="https://s1.ax1x.com/2022/03/26/qU5JKS.png" alt="qU5JKS.png"></a></p><p>· 运算符优先级：<a href="https://imgtu.com/i/qU5aUs"><img src="https://s1.ax1x.com/2022/03/26/qU5aUs.png" alt="qU5aUs.png"></a></p><p>· if分支语句：<a href="https://imgtu.com/i/qU5d5n"><img src="https://s1.ax1x.com/2022/03/26/qU5d5n.png" alt="qU5d5n.png"></a></p><p>· if-else语句：<a href="https://imgtu.com/i/qU50Cq"><img src="https://s1.ax1x.com/2022/03/26/qU50Cq.png" alt="qU50Cq.png"></a></p><p>· if-else-if语句：<a href="https://imgtu.com/i/qU5B80"><img src="https://s1.ax1x.com/2022/03/26/qU5B80.png" alt="qU5B80.png"></a></p><p>· 三元表达式：表达式 ？表达式1 ：表达式2</p><p><a href="https://imgtu.com/i/qU5D2V"><img src="https://s1.ax1x.com/2022/03/26/qU5D2V.png" alt="qU5D2V.png"></a></p><h2 id="2022-3-26"><a href="#2022-3-26" class="headerlink" title="2022.3.26"></a>2022.3.26</h2><p>· switch分支语句：<strong>1.开发里面，表达式通常写成变量；</strong></p><p><a href="https://imgtu.com/i/q0QLI1"><img src="https://s1.ax1x.com/2022/03/27/q0QLI1.png" alt="q0QLI1.png"></a></p><p><strong>2.num的值和case里面的值相匹配的时候是全等，必须是值和数据类型一致才可以 num === 1；</strong></p><p><strong>3.break如果当前的case里面没有break，则不会退出switch，会继续执行下一个case</strong></p><p>·<em>switch和if-else-if区别：</em></p><p><a href="https://imgtu.com/i/q0QbZ9"><img src="https://s1.ax1x.com/2022/03/27/q0QbZ9.png" alt="q0QbZ9.png"></a></p><p>· for循环：</p><p><a href="https://imgtu.com/i/q0QqaR"><img src="https://s1.ax1x.com/2022/03/27/q0QqaR.png" alt="q0QqaR.png"></a></p><p><a href="https://imgtu.com/i/q0Q7qJ"><img src="https://s1.ax1x.com/2022/03/27/q0Q7qJ.png" alt="q0Q7qJ.png"></a></p><p>· 断点调试（sources）：</p><p><a href="https://imgtu.com/i/q0QXPx"><img src="https://s1.ax1x.com/2022/03/27/q0QXPx.png" alt="q0QXPx.png"></a></p><p>· while循环：</p><p><a href="https://imgtu.com/i/q0QvRK"><img src="https://s1.ax1x.com/2022/03/27/q0QvRK.png" alt="q0QvRK.png"></a></p><p>· do-while循环：</p><p><a href="https://imgtu.com/i/q0QxxO"><img src="https://s1.ax1x.com/2022/03/27/q0QxxO.png" alt="q0QxxO.png"></a></p><p><a href="https://imgtu.com/i/q0lSMD"><img src="https://s1.ax1x.com/2022/03/27/q0lSMD.png" alt="q0lSMD.png"></a></p><p>· continue关键字：用于<em>立即跳出本次循环，继续下一次循环</em></p><p>· break关键字：<em>用于立即跳出整个循环（循环结束）</em></p><p>· 标识符命名规范：变量、函数命名必须有意义；变量名一般为名词；函数名一般为动词</p><p>· 操作符规范：左右各留一个空格</p><p>· 单行注释规范：前要有空格</p><p>· 数组：一组<strong>数据的集合</strong>，其中每个数据称为<strong>元素</strong>，在数组中可以存放任意类型的元素。</p><p>· 创建数组方式：数组中可以存放<strong>任意类型</strong>的数据</p><p><a href="https://imgtu.com/i/q0lpse"><img src="https://s1.ax1x.com/2022/03/27/q0lpse.png" alt="q0lpse.png"></a></p><h2 id="2022-3-27"><a href="#2022-3-27" class="headerlink" title="2022.3.27"></a>2022.3.27</h2><p>· 数组的索引：<strong>索引号从0开始</strong></p><p><a href="https://imgtu.com/i/qBPo3n"><img src="https://s1.ax1x.com/2022/03/27/qBPo3n.png" alt="qBPo3n.png"></a></p><p>· 遍历数组：把数组的元素从头到尾访问一次，arr[r]中i计数器当索引号来用</p><p>· 数组长度：<strong>数组名.length</strong></p><p>?    <em>数组的长度是元素的个数，不要跟索引号混淆；arr.length是动态检测元素的个数</em></p><p>· 数组中新增元素：1.修改length长度</p><p>2.修改索引号，追加数组元素，<strong>但是不能直接给数组名赋值，否则会覆盖掉以前的数据</strong></p><p>· 筛选数组：方法1.新数组索引号应该从0开始，依次递增</p><p>方法2.定义一个newArr=[]；刚开始newArr.length为0，然后将筛选的arr[i]存入newArr[newArr.length]</p><p>·函数的使用：声明函数和调用函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2.</span>.</span>)</span>&#123;</span><br><span class="line">函数体；</span><br><span class="line"><span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/qBP4hj"><img src="https://s1.ax1x.com/2022/03/27/qBP4hj.png" alt="qBP4hj.png"></a></p><p><a href="https://imgtu.com/i/qBPI9s"><img src="https://s1.ax1x.com/2022/03/27/qBPI9s.png" alt="qBPI9s.png"></a></p><p><a href="https://imgtu.com/i/qBP7j0"><img src="https://s1.ax1x.com/2022/03/27/qBP7j0.png" alt="qBP7j0.png"></a></p><p>· 函数的封装：把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p><p>· 函数的参数：形参和实参</p><p><a href="https://imgtu.com/i/qBPqBT"><img src="https://s1.ax1x.com/2022/03/27/qBPqBT.png" alt="qBPqBT.png"></a></p><p><a href="https://imgtu.com/i/qBPTcq"><img src="https://s1.ax1x.com/2022/03/27/qBPTcq.png" alt="qBPTcq.png"></a></p><p>· 形参实参个数匹配问题：</p><p><a href="https://imgtu.com/i/qBPLHU"><img src="https://s1.ax1x.com/2022/03/27/qBPLHU.png" alt="qBPLHU.png"></a></p><p><a href="https://imgtu.com/i/qBPbuV"><img src="https://s1.ax1x.com/2022/03/27/qBPbuV.png" alt="qBPbuV.png"></a></p><h2 id="2022-3-28"><a href="#2022-3-28" class="headerlink" title="2022.3.28"></a>2022.3.28</h2><p>· 函数的返回值：1.有终止函数的功能；2.并且只返回一个值，返回的结果是最后一个值；3.求任意两个数的，加减乘除结果，返回的是一个数组；4.函数如果有return，则返回的是return后面的值，如果函数没有return，则返回undefined。<a href="https://imgtu.com/i/qsLzGt"><img src="https://s1.ax1x.com/2022/03/29/qsLzGt.png" alt="qsLzGt.png"></a></p><p><strong>函数都有返回值</strong></p><p><a href="https://imgtu.com/i/qsLjIA"><img src="https://s1.ax1x.com/2022/03/29/qsLjIA.png" alt="qsLjIA.png"></a></p><p>· arguments的使用：是当前函数的一个内置对象，对象里存储了传递的所有的实参，当不知道用户传递过来多少个实参时用。</p><p>· 伪数组：并不是真正意义上的数组，</p><p>?    1.具有数组的length属性；2.按照索引的方式进行存储；3.它没有真正数组的一些方法 pop() push()等等</p><p>· 利用函数翻转任意数组 ：reverse()</p><p>· 函数调用另一个函数：<a href="https://imgtu.com/i/qsLXad"><img src="https://s1.ax1x.com/2022/03/29/qsLXad.png" alt="qsLXad.png"></a></p><p>· 函数的俩种声明方式：</p><p><a href="https://imgtu.com/i/qsLxPI"><img src="https://s1.ax1x.com/2022/03/29/qsLxPI.png" alt="qsLxPI.png"></a></p><p>· JavaScript作用域：代码名字在某个范围内起作用和效果，目的是为了提高程序的可靠性更重要的是减少命名冲突。</p><p>?    <strong>分全局作用域和局部作用域</strong></p><p><a href="https://imgtu.com/i/qsOSRP"><img src="https://s1.ax1x.com/2022/03/29/qsOSRP.png" alt="qsOSRP.png"></a></p><p>· 变量的作用域：1.全局变量：在全局作用域下的变量，在全局下都可使用。<em>如果在函数内部，没有声明直接赋值的变量也属于全局变量</em></p><p>2.局部变量：在局部作用域下的变量，即在函数内部的变量。函数的形参也可以看作是局部变量。更省资源</p><p>· 现阶段js没有块级作用域；js在es6的时候新增的块级作用域。</p><p><a href="https://imgtu.com/i/qsOCM8"><img src="https://s1.ax1x.com/2022/03/29/qsOCM8.png" alt="qsOCM8.png"></a></p><p>· 作用域链：内部函数访问外部函数的变量，采取的是链式查找的方式来决定取那个值。<a href="https://imgtu.com/i/qsOpxf"><img src="https://s1.ax1x.com/2022/03/29/qsOpxf.png" alt="qsOpxf.png"></a></p><p>· js引擎运行js：分倆步-》预解析+代码执行</p><p>（1）预解析:js引擎会把js里面所有的var，还有function提升到当前作用域的最前面</p><p>（2）代码执行：按照代码书写顺序，从上到下执行</p><p>· <strong>预解析</strong>-》变量预解析（变量提升）+函数预解析（函数提升）</p><p>（1）变量提升：就是把所有的变量声明提升到当前的作用域 的最前面，不提升赋值操作</p><p>?    （2）函数提升：就是把所有的函数声明提升到当前作用域的最前面，不调用函数 </p><p>· JavaScript对象：具体的事物，由属性和方法组成。</p><p>（1）属性：事物的特征，在对象中用属性来表示（常用名词）</p><p>（2）方法：事物的行为，在对象中用方法来表示（常用动词）</p><p>· 创建对象：</p><p>一、利用对象字面量创建对象{}：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line"><span class="attr">uname</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">sayHi</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>【(1)里面的属性或者方法我们采取键值对的形式，键 属性名： 值 属性值</p><p>（2)多个属性或者方法中间用逗号隔开的</p><p>（3）方法冒号后面跟的是一个匿名函数】</p><p> （2）使用对象：</p><p>【（1）调用对象的属性：对象名.属性名即console.log(obj.uname);</p><p>?        (2)调用属性还有一种方法：对象名[‘属性名’]即console.log(obj[‘age’]);</p><p>?        (3)调用对象的方法：对象名.方法名（）即obj.sayHi();<strong>不要忘了小括号</strong>】</p><p>· 变量属性函数方法的区别： </p><p><a href="https://imgtu.com/i/qsOPsS"><img src="https://s1.ax1x.com/2022/03/29/qsOPsS.png" alt="qsOPsS.png"></a></p><p>二、利用new Object创建对象：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.uname=<span class="string">&#x27;张三丰&#x27;</span>;</span><br><span class="line">obj.age=<span class="number">18</span>;</span><br><span class="line">obj.sex=<span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">obj.sayHi=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【（1）利用等号=赋值方法，添加对象的属性和方法</p><p>（2）每个属性和方法之间用 分号 结束</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.uname);</span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">&#x27;sex&#x27;</span>]);</span><br><span class="line">obj.sayHi();</span><br></pre></td></tr></table></figure><p>· 构造函数：把对象里面一些相同的属性和方法抽象出来封装到函数里面</p><p><a href="https://imgtu.com/i/qsOiqg"><img src="https://s1.ax1x.com/2022/03/29/qsOiqg.png" alt="qsOiqg.png"></a></p><p>三、利用构造函数创建对象：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.属性=值;</span><br><span class="line"><span class="built_in">this</span>.方法=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> 构造函数名;</span><br></pre></td></tr></table></figure><p>(1)构造函数名字首字母要大写</p><p>（2）我们构造函数不需要return，就可以返回结果</p><p>（3）调用构造函数必须使用new</p><p>（4）只要new Star（）调用函数就创建一个对象ldh{}</p><p><a href="https://imgtu.com/i/qsOkZQ"><img src="https://s1.ax1x.com/2022/03/29/qsOkZQ.png" alt="qsOkZQ.png"></a></p><h2 id="2022-3-29"><a href="#2022-3-29" class="headerlink" title="2022.3.29"></a>2022.3.29</h2><p>· 构造函数和对象的区别：利用构造函数创建对象的过程，我们也成为对象的实例化<a href="https://imgtu.com/i/qg3he1"><img src="https://s1.ax1x.com/2022/03/30/qg3he1.png" alt="qg3he1.png"></a></p><p>·  new关键字执行过程：</p><p>（1）new构造函数可以在内存中创建一个空的对象；</p><p>（2）this就会指向刚才创建的空对象；</p><p>（3）执行构造函数里面的代码，给这个新对象添加属性和方法；</p><p>（4）返回这个新对象（所有构造函数里不需要return）</p><p>· 遍历对象：<strong>for （变量 in 对象） {}</strong></p><p>变量会习惯写k或者key<a href="https://imgtu.com/i/qg3oFK"><img src="https://s1.ax1x.com/2022/03/30/qg3oFK.png" alt="qg3oFK.png"></a></p><p>· 内置对象：js自带的一些对象，供开发者使用，并提供了一些常用的或者是最基本而必要的功能(属性和方法)</p><p>· 查文档：MDN/W3C</p><p><a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><p>· Math对象：</p><p>-》常用的：<a href="https://imgtu.com/i/qg37WD"><img src="https://s1.ax1x.com/2022/03/30/qg37WD.png" alt="qg37WD.png"></a></p><p>-》Math.random():返回一个随机的小数0=&lt;x&lt;1；方法里不跟参数<a href="https://imgtu.com/i/qg35o6"><img src="https://s1.ax1x.com/2022/03/30/qg35o6.png" alt="qg35o6.png"></a><a href="https://imgtu.com/i/qg3TJO"><img src="https://s1.ax1x.com/2022/03/30/qg3TJO.png" alt="qg3TJO.png"></a></p><p>· Date日期对象：是一个构造函数，必须使用new来调用创建日期对象<a href="https://imgtu.com/i/qg3bSe"><img src="https://s1.ax1x.com/2022/03/30/qg3bSe.png" alt="qg3bSe.png"></a></p><p> ·-》日期格式化：<a href="https://imgtu.com/i/qg3Lyd"><img src="https://s1.ax1x.com/2022/03/30/qg3Lyd.png" alt="qg3Lyd.png"></a></p><p>-》date总的毫秒数（时间戳）：<a href="https://imgtu.com/i/qg3OOA"><img src="https://s1.ax1x.com/2022/03/30/qg3OOA.png" alt="qg3OOA.png"></a></p><p>-》倒计时：  <a href="https://imgtu.com/i/qg3jeI"><img src="https://s1.ax1x.com/2022/03/30/qg3jeI.png" alt="qg3jeI.png"></a></p><p>· 创建数组的两种方式：<a href="https://imgtu.com/i/qg3xTP"><img src="https://s1.ax1x.com/2022/03/30/qg3xTP.png" alt="qg3xTP.png"></a></p><p>· 检测是否为数组的俩种方式：</p><p><a href="https://imgtu.com/i/qg3vwt"><img src="https://s1.ax1x.com/2022/03/30/qg3vwt.png" alt="qg3vwt.png"></a></p><p>· 添加数组元素：分前后添加<a href="https://imgtu.com/i/qg89fS"><img src="https://s1.ax1x.com/2022/03/30/qg89fS.png" alt="qg89fS.png"></a></p><p>· 删除数组元素：<a href="https://imgtu.com/i/qg8PSg"><img src="https://s1.ax1x.com/2022/03/30/qg8PSg.png" alt="qg8PSg.png"></a></p><p>· 数组排序：翻转数组、冒泡排序<a href="https://imgtu.com/i/qg8pY8"><img src="https://s1.ax1x.com/2022/03/30/qg8pY8.png" alt="qg8pY8.png"></a></p><p>·获取 数组元素索引：分前后查找</p><p><a href="https://imgtu.com/i/qg8Fyj"><img src="https://s1.ax1x.com/2022/03/30/qg8Fyj.png" alt="qg8Fyj.png"></a></p><h2 id="2022-3-30"><a href="#2022-3-30" class="headerlink" title="2022.3.30"></a>2022.3.30</h2><p>· 数组去重：<a href="https://imgtu.com/i/q2cQbt"><img src="https://s1.ax1x.com/2022/03/30/q2cQbt.png" alt="q2cQbt.png"></a></p><p>· 数组转换为字符串：toString();join(分隔符)<a href="https://imgtu.com/i/q2cmgH"><img src="https://s1.ax1x.com/2022/03/30/q2cmgH.png" alt="q2cmgH.png"></a><a href="https://imgtu.com/i/q2cZCD"><img src="https://s1.ax1x.com/2022/03/30/q2cZCD.png" alt="q2cZCD.png"></a></p><p>· 基本包装类型：<a href="https://imgtu.com/i/q2cAUK"><img src="https://s1.ax1x.com/2022/03/30/q2cAUK.png" alt="q2cAUK.png"></a></p><p>· <strong>字符串的不可变性：字符串里面的值，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间</strong>，开辟太多会影响效率问题</p><p>· 根据字符返回位置：<a href="https://imgtu.com/i/q2cnvd"><img src="https://s1.ax1x.com/2022/03/30/q2cnvd.png" alt="q2cnvd.png"></a><a href="https://imgtu.com/i/q2cKKA"><img src="https://s1.ax1x.com/2022/03/30/q2cKKA.png" alt="q2cKKA.png"></a></p><p>· 查找字符串中某个字符出现的次数：<a href="https://imgtu.com/i/q2cMDI"><img src="https://s1.ax1x.com/2022/03/30/q2cMDI.png" alt="q2cMDI.png"></a></p><p>· <strong>根据位置返回字符：</strong><a href="https://imgtu.com/i/q2cJPS"><img src="https://s1.ax1x.com/2022/03/30/q2cJPS.png" alt="q2cJPS.png"></a></p><p>· 拼接以及截取字符串：<a href="https://imgtu.com/i/q2c1VP"><img src="https://s1.ax1x.com/2022/03/30/q2c1VP.png" alt="q2c1VP.png"></a></p><p>· 替换字符串以及转换为数组：<a href="https://imgtu.com/i/q2ct2Q"><img src="https://s1.ax1x.com/2022/03/30/q2ct2Q.png" alt="q2ct2Q.png"></a></p><p>-》查询：<a href="https://imgtu.com/i/q2cE4O"><img src="https://s1.ax1x.com/2022/03/30/q2cE4O.png" alt="q2cE4O.png"></a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">toUpperCase();<span class="comment">//转换大写</span></span><br><span class="line">toLowerCase();<span class="comment">//转换小写</span></span><br></pre></td></tr></table></figure><p>· 数据类型内存分配：</p><p>（1）简单数据类型（基本数据类型、值类型）：在存储时变量中的是值本身，数据直接存放在栈空间中，如string、number、Boolean、undefined、null；</p><p>（2）复杂数据类型（引用类型）：在存储时变量中存储的仅仅是地址（引用），真正的对象实例存放在堆空间里，通过new关键字创建的对象（系统对象，自定义对象），如object、array、date等；</p><p>（3）堆和栈：<a href="https://imgtu.com/i/q2cNvj"><img src="https://s1.ax1x.com/2022/03/30/q2cNvj.png" alt="q2cNvj.png"></a></p><p>（4）简单、复杂数据类型内存分配过程：<a href="https://imgtu.com/i/q2cY8g"><img src="https://s1.ax1x.com/2022/03/30/q2cY8g.png" alt="q2cY8g.png"></a><a href="https://imgtu.com/i/q2c858"><img src="https://s1.ax1x.com/2022/03/30/q2c858.png" alt="q2c858.png"></a></p><p>（5）简单数据类型传参：函数的形参可以看作是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，<strong>其实是把变量在栈空间里的值复制一份给形参，</strong>那么在方法内部对形参做任何修改，都不会影响到外部变量。<a href="https://imgtu.com/i/q2caKs"><img src="https://s1.ax1x.com/2022/03/30/q2caKs.png" alt="q2caKs.png"></a></p><p>（6）复杂数据类型传参：函数的形参也可以看作是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存 <strong>的堆地址复制给形参</strong>，<strong>形参和实参其实保存的是同一个堆地址</strong>，所以操作的是同一个对象。</p><p><a href="https://imgtu.com/i/q2cdrn"><img src="https://s1.ax1x.com/2022/03/30/q2cdrn.png" alt="q2cdrn.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5+css3进阶+移动web</title>
      <link href="/2022/03/12/html+css%E8%BF%9B%E9%98%B6%EF%BC%88%E7%A7%BB%E5%8A%A8web%EF%BC%89/"/>
      <url>/2022/03/12/html+css%E8%BF%9B%E9%98%B6%EF%BC%88%E7%A7%BB%E5%8A%A8web%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="2022-3-12"><a href="#2022-3-12" class="headerlink" title="2022.3.12"></a>2022.3.12</h1><p>· 字体图标的使用：</p><p><a href="https://imgtu.com/i/bXDJbj"><img src="https://s1.ax1x.com/2022/03/14/bXDJbj.png" alt="bXDJbj.png"></a></p><p>?    1.在head里直接引用：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./iconfont/iconfont<span class="selector-class">.css</span>(字符的css文件)&quot;&gt;</span><br></pre></td></tr></table></figure><p>?    2.再在body里引用：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont(类名，不可缺) icon-favorites-fill(图标名)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>· 平面转换：改变盒子在平面内的形态（位移、旋转、缩放）</p><p>【 位移 】：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">translate</span>(水平移动距离，垂直移动距离); </span><br><span class="line"><span class="attribute">transition</span>:all 速度s;</span><br></pre></td></tr></table></figure><p>【绝对定位居中】：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><h2 id="2022-3-13"><a href="#2022-3-13" class="headerlink" title="2022.3.13"></a>2022.3.13</h2><p>【 旋转 】：</p><p><a href="https://imgtu.com/i/bXD8Kg"><img src="https://s1.ax1x.com/2022/03/14/bXD8Kg.png" alt="bXD8Kg.png"></a></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate</span>(角度deg);</span><br></pre></td></tr></table></figure><p>【转换原点】：绕某一点旋转</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>:原点水平位置 原点垂直位置;</span><br></pre></td></tr></table></figure><p>【多重转换】：边转边走（车轮）：先位移后旋转（反了会导致旋转改变坐标轴向）</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">tranlate</span>(像素) <span class="built_in">rotate</span>(角度deg);</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bXDGrQ"><img src="https://s1.ax1x.com/2022/03/14/bXDGrQ.png" alt="bXDGrQ.png"></a></p><p>【缩放】：大于1表放大；小于1表缩小</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">scale</span>(缩放倍数);</span><br></pre></td></tr></table></figure><p><strong>透明：opacity:0消失、1出现</strong></p><p>· 渐变：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">backgroud-image:<span class="built_in">linera-gradient</span>(颜色<span class="number">1</span>,颜色<span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><h2 id="2022-3-14"><a href="#2022-3-14" class="headerlink" title="2022.3.14"></a>2022.3.14</h2><p>· 空间转换（3D转换）：z轴位置与视线方向相同</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">translate3d</span>(x,y,z);</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translateX</span>(值);</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translateY</span>(值);</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translateZ</span>(值);</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bX5DtU"><img src="https://s1.ax1x.com/2022/03/14/bX5DtU.png" alt="bX5DtU.png"></a></p><p>· 透视：近大远小，但电脑屏幕的平面，默认无法观察远近效果</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">perspective</span>:像素;(添加给父级的，取值<span class="number">800</span>-<span class="number">1200</span>)</span><br></pre></td></tr></table></figure><h2 id="2022-3-15"><a href="#2022-3-15" class="headerlink" title="2022.3.15"></a>2022.3.15</h2><p>· 空间旋转：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotateZ</span>(值); 饶中心转，跟平面一样   角度</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotateX</span>(值); 饶X朝屏幕向上下转</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotateY</span>(值); 饶Y朝屏幕左右转</span><br></pre></td></tr></table></figure><p>【左手法则】：判断旋转方向：<strong>左手</strong>握住旋转轴，拇指指向正值方向，手指弯曲方向为旋转正值方向</p><p>· 立体呈现：父级，使子元素处于真正的3d空间；默认值flat，表示子元素处于2D平面内呈现</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;</span><br></pre></td></tr></table></figure><h2 id="2022-3-16"><a href="#2022-3-16" class="headerlink" title="2022.3.16"></a>2022.3.16</h2><p>· 空间转换-缩放：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">scaleX</span>(倍数);</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">scaleY</span>(倍数);</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">scaleZ</span>(倍数);</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">scale3d</span>(x,y,z);</span><br></pre></td></tr></table></figure><p>· 动画：</p><p>from..to..单个动画；百分比（动画总时长的占比）…多个动画</p><p><a href="https://imgtu.com/i/q93pVI"><img src="https://s1.ax1x.com/2022/03/17/q93pVI.png" alt="q93pVI.png"></a></p><p><a href="https://imgtu.com/i/q91zqA"><img src="https://s1.ax1x.com/2022/03/17/q91zqA.png" alt="q91zqA.png"></a></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: change <span class="number">1s</span> <span class="built_in">linear</span>(匀速运动，一般不设置)/<span class="built_in">step</span>(<span class="number">3</span>)(分布动画) <span class="number">1s</span> <span class="number">3</span>(重复<span class="number">3</span>次)/<span class="built_in">infinite</span>(无限循环)  <span class="built_in">alternate</span>(反向运动) <span class="built_in">backwards</span>(默认值，动画停留在最初的状态)/<span class="built_in">forwards</span>(动画停留在最终)</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/qFLsRU"><img src="https://s1.ax1x.com/2022/03/18/qFLsRU.png" alt="qFLsRU.png"></a></p><p>· 逐帧动画：配合精灵图</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation-timing-function</span>:<span class="built_in">steps</span>(N);</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/qFLdZn"><img src="https://s1.ax1x.com/2022/03/18/qFLdZn.png" alt="qFLdZn.png"></a></p><p>· 多组动画：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>:动画<span class="number">1</span>,动画<span class="number">2</span>,动画N;</span><br></pre></td></tr></table></figure><p>·  分辨率分类：物理分辨率是生产屏幕时就固定的；逻辑分辨率是由软件（驱动）决定的，代码也是参照这个写的</p><h2 id="2022-3-17"><a href="#2022-3-17" class="headerlink" title="2022.3.17"></a>2022.3.17</h2><p>· 视口：网页宽度和设备宽度（分辨率）相同</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span> vs现有</span><br></pre></td></tr></table></figure><p>没有视口标签就是<strong>980px</strong></p><p>· 网页大多为二倍图（2：1），为了高分辨率下图片不会模糊失真</p><p>· 百分比布局：能够使用百分比布局开发网页；宽度自适应，高度固定</p><p>· Flex布局：灵活、快速的开发网页</p><p><a href="https://imgtu.com/i/qFL0I0"><img src="https://s1.ax1x.com/2022/03/18/qFL0I0.png" alt="qFL0I0.png"></a></p><p><strong>caniuse.com</strong>可打开这个网站查询技术是否兼容浏览器</p><p><a href="https://imgtu.com/i/qFLwaq"><img src="https://s1.ax1x.com/2022/03/18/qFLwaq.png" alt="qFLwaq.png"></a></p><p>· 【主轴对齐方式】：</p><p><a href="https://imgtu.com/i/qFLDiV"><img src="https://s1.ax1x.com/2022/03/18/qFLDiV.png" alt="qFLDiV.png"></a></p><p>· 【侧轴对齐方式】：</p><p><a href="https://imgtu.com/i/qFLyzF"><img src="https://s1.ax1x.com/2022/03/18/qFLyzF.png" alt="qFLyzF.png"></a></p><p>· 【弹性盒子】：如果不给宽高，就按内容的大小撑开；如果给宽高，给多少就是多少；如果有拉伸，就会跟父级一样</p><p>· 【弹性伸缩比】：根据父级剩余尺寸给定份数</p><p><a href="https://imgtu.com/i/qFLrGT"><img src="https://s1.ax1x.com/2022/03/18/qFLrGT.png" alt="qFLrGT.png"></a></p><h2 id="2022-3-18"><a href="#2022-3-18" class="headerlink" title="2022.3.18"></a>2022.3.18</h2><p>小兔鲜儿移动端支付页面</p><h2 id="2022-3-19"><a href="#2022-3-19" class="headerlink" title="2022.3.19"></a>2022.3.19</h2><p>小兔鲜儿移动端支付页面</p><h2 id="2022-3-20"><a href="#2022-3-20" class="headerlink" title="2022.3.20"></a>2022.3.20</h2><p>· 【改变主轴方向】：</p><p>?    1.先确定主轴方向 ；2.在选择对应的属性实现主轴或侧轴的对齐方式</p><p><a href="https://imgtu.com/i/qmYLp8"><img src="https://s1.ax1x.com/2022/03/21/qmYLp8.png" alt="qmYLp8.png"></a></p><p>· 【弹性盒子换行】：</p><p><a href="https://imgtu.com/i/qmYX6g"><img src="https://s1.ax1x.com/2022/03/21/qmYX6g.png" alt="qmYX6g.png"></a></p><p>· 移动适配：</p><p>?    · rem:目前多数企业在用的解决方案</p><p>?    · vw/vh:未来的解决方案</p><p>· rem单位：设置网页元素的尺寸；相对单位，是相对html标签的</p><p><a href="https://imgtu.com/i/qmYbff"><img src="https://s1.ax1x.com/2022/03/21/qmYbff.png" alt="qmYbff.png"></a></p><p><strong>要在style里用html{设置自豪}</strong></p><p>· rem移动适配-媒体查询：</p><p><a href="https://imgtu.com/i/qmYO1S"><img src="https://s1.ax1x.com/2022/03/21/qmYO1S.png" alt="qmYO1S.png"></a></p><p>· rem移动适配：将网页等分成10分，html标签的自豪为视口宽度的1/10</p><p>· rem适配原理：</p><p><a href="https://imgtu.com/i/qmYjXQ"><img src="https://s1.ax1x.com/2022/03/21/qmYjXQ.png" alt="qmYjXQ.png"></a></p><p>· flexible移动适配：</p><p><a href="https://imgtu.com/i/qmYxmj"><img src="https://s1.ax1x.com/2022/03/21/qmYxmj.png" alt="qmYxmj.png"></a></p><p>· Less：是一个css预处理器，Less文件后缀.less;<em>浏览器不识别Less代码，目前阶段，网页要引入对应的css</em></p><p>文件</p><p>· 【less语法】：</p><p><a href="https://imgtu.com/i/qmYz0s"><img src="https://s1.ax1x.com/2022/03/21/qmYz0s.png" alt="qmYz0s.png"></a></p><p><a href="https://imgtu.com/i/qmtS7n"><img src="https://s1.ax1x.com/2022/03/21/qmtS7n.png" alt="qmtS7n.png"></a></p><p><a href="https://imgtu.com/i/qKNxCn"><img src="https://s1.ax1x.com/2022/03/22/qKNxCn.png" alt="qKNxCn.png"></a></p><p><a href="https://imgtu.com/i/qKNz3q"><img src="https://s1.ax1x.com/2022/03/22/qKNz3q.png" alt="qKNz3q.png"></a></p><p><a href="https://imgtu.com/i/qKUSg0"><img src="https://s1.ax1x.com/2022/03/22/qKUSg0.png" alt="qKUSg0.png"></a></p><p><a href="https://imgtu.com/i/qKUpvV"><img src="https://s1.ax1x.com/2022/03/22/qKUpvV.png" alt="qKUpvV.png"></a></p><p><a href="https://imgtu.com/i/qKUCuT"><img src="https://s1.ax1x.com/2022/03/22/qKUCuT.png" alt="qKUCuT.png"></a></p><h2 id="2022-3-21"><a href="#2022-3-21" class="headerlink" title="2022.3.21"></a>2022.3.21</h2><p>· vw（viewport width）:相对单位，相对视口的尺寸计算结果，设置网页元素的尺寸；<strong>1vw=1/100视口宽度</strong></p><p>· vh（viewport height）：同上，<strong>1vh=1/100视口高度</strong></p><p>· vw适配原理：</p><p><a href="https://imgtu.com/i/qKUibF"><img src="https://s1.ax1x.com/2022/03/22/qKUibF.png" alt="qKUibF.png"></a></p><p>· vh适配原理：同上</p><p>· vh全面屏影响：会导致在不同的手机屏里，高缩小了；最好不要vw、vh混合使用</p><p>· 媒体查询基本语法：</p><p><a href="https://imgtu.com/i/qKUPDU"><img src="https://s1.ax1x.com/2022/03/22/qKUPDU.png" alt="qKUPDU.png"></a></p><p>?        -》书写顺序：</p><p><a href="https://imgtu.com/i/qKUAUJ"><img src="https://s1.ax1x.com/2022/03/22/qKUAUJ.png" alt="qKUAUJ.png"></a></p><p>· 媒体查询-link写法：</p><p><a href="https://imgtu.com/i/qKUE59"><img src="https://s1.ax1x.com/2022/03/22/qKUE59.png" alt="qKUE59.png"></a></p><p>· 媒体查询-隐藏：</p><p><a href="https://imgtu.com/i/qKUkE4"><img src="https://s1.ax1x.com/2022/03/22/qKUkE4.png" alt="qKUkE4.png"></a></p><p>· Bootstrap：一种框架快速开发布局响应式网页。*中文官网：<a href="https://www.bootcss.com/*%EF%BC%88%E2%91%A0%E7%94%A8%E4%BA%8E%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84Bootstrap%EF%BC%9B%E2%91%A1Bootstrap%E6%BA%90%E7%A0%81%EF%BC%8C%E9%9C%80%E8%A6%81less%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8C%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE%E5%B7%A5%E4%BD%9C%EF%BC%8C%E6%96%87%E4%BB%B6%E5%B8%A6dist%E5%90%8E%E7%BC%80%EF%BC%89%E7%AD%89%E4%BA%8E%E7%8E%B0%E6%88%90%E7%9A%84%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E5%92%8Cless%E3%80%82">https://www.bootcss.com/*（①用于生产环境的Bootstrap；②Bootstrap源码，需要less编译器和一些设置工作，文件带dist后缀）等于现成的媒体查询和less。</a></p><p>?    -》使用步骤：</p><p><a href="https://imgtu.com/i/qlVoSH"><img src="https://s1.ax1x.com/2022/03/23/qlVoSH.png" alt="qlVoSH.png"></a></p><p><a href="https://imgtu.com/i/qlV76A"><img src="https://s1.ax1x.com/2022/03/23/qlV76A.png" alt="qlV76A.png"></a></p><p><a href="https://imgtu.com/i/qlVHOI"><img src="https://s1.ax1x.com/2022/03/23/qlVHOI.png" alt="qlVHOI.png"></a></p><p>?    -》栅格系统：布局响应式网页，网页分成12等份</p><p><a href="https://imgtu.com/i/qlVWTK"><img src="https://s1.ax1x.com/2022/03/23/qlVWTK.png" alt="qlVWTK.png"></a></p><p>?    -》container类名：</p><p><a href="https://imgtu.com/i/qlVhFO"><img src="https://s1.ax1x.com/2022/03/23/qlVhFO.png" alt="qlVhFO.png"></a></p><p><a href="https://imgtu.com/i/qlV5fe"><img src="https://s1.ax1x.com/2022/03/23/qlV5fe.png" alt="qlV5fe.png"></a></p><p><strong>要学会从学习手册（中文官网）里查找需要的代码，复制粘贴</strong></p><p>?    -》全局css样式：从手册里，复制粘贴class的类名即可起效</p><p><a href="https://imgtu.com/i/qKUE59"><img src="https://s1.ax1x.com/2022/03/22/qKUE59.png" alt="qKUE59.png"></a></p><p>?    -》组件样式：引样式表，改类名</p><p><a href="https://imgtu.com/i/qlVqmt"><img src="https://s1.ax1x.com/2022/03/23/qlVqmt.png" alt="qlVqmt.png"></a></p><p>?    -》字体图标：同上</p><p><a href="https://imgtu.com/i/qlVTld"><img src="https://s1.ax1x.com/2022/03/23/qlVTld.png" alt="qlVTld.png"></a></p><p>?    -》（js插件）-下拉菜单：引js，改类名</p><p><a href="https://imgtu.com/i/qlVL0P"><img src="https://s1.ax1x.com/2022/03/23/qlVL0P.png" alt="qlVL0P.png"></a></p><p>?    -》（js插件）-轮播图：同上</p><p>?    -》全局样式：排版（电商站做不到响应式，企业站才能，或者是pc端移动端分开做的）</p>]]></content>
      
      
      <categories>
          
          <category> html、css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html、css、 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5+css3基础</title>
      <link href="/2022/03/01/html+css%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/01/html+css%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="2022-3-1"><a href="#2022-3-1" class="headerlink" title="2022.3.1"></a>2022.3.1</h1><h2 id="一、基础认知"><a href="#一、基础认知" class="headerlink" title="一、基础认知"></a>一、基础认知</h2><p>1.网页有文字、图片、音频、视频、超链接组成<br>2.程序员写的代码通过浏览器转换成网页（对代码进行解析渲染，渲染引擎不同，导致解析代码的速度等不同）<br>3.五大浏览器：IE、火狐、谷歌(程序员)、safari(苹果)、opera(欧鹏)<br>4.Web标准：HTML（结构-&gt;页面元素和内容）<br>        CSS（表现-&gt;页面样式）<br>        Javascript（行为-&gt;模型定义与页面交互)</p><h3 id="5-HTML："><a href="#5-HTML：" class="headerlink" title="5.HTML："></a>5.HTML：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>文字加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    · 固定结构：<a href="https://imgtu.com/i/bJEPg0"><img src="https://s4.ax1x.com/2022/03/03/bJEPg0.png" alt="bJEPg0.png"></a><br>​    · 注释（养成好习惯）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释内容--&gt;</span></span><br></pre></td></tr></table></figure><p>​    · 双标签，单标签<br>​    · 父子关系（嵌套），兄弟关系（并列）<br>​    · 标题标签h1~h6（数大字小）:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    · 段落标签： （独占一行）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 我是一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br></pre></td></tr></table></figure><h1 id="2022-3-3"><a href="#2022-3-3" class="headerlink" title="2022.3.3"></a>2022.3.3</h1><p>​    · 换行标签：（文字强制换行）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>· 分割线：（水平线）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>· 文本格式化标签：（都是双标签）</p><p><a href="https://imgtu.com/i/bJhrXF"><img src="https://s4.ax1x.com/2022/03/03/bJhrXF.md.png" alt="bJhrXF.md.png"></a></p><p>· 图片标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;路径+图片名&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;占位文字&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标悬停文字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;宽度&quot;</span> <span class="attr">height</span>=<span class="string">&quot;高度&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ·相对路径：从当前文件（当前的html）开始出发找目标文件（要找的图片）的过程。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">同级目录：①<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;目标图片.gif&quot;</span>&gt;</span> ②<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./目标图片.gif&quot;</span>&gt;</span></span><br><span class="line">下级目录：<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;文件夹名/目标名字.gif&quot;</span>&gt;</span></span><br><span class="line">上级目录：<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../目标图片.gif&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ·绝对路径：指目录下的绝对路径，可直接到达目标位置，通常从盘符开始的路径</p><p>· 音频标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;./music.mp3&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bJhD6U"><img src="https://s4.ax1x.com/2022/03/03/bJhD6U.png" alt="bJhD6U.png"></a></p><p>· 视频标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;./video.mp4&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bJhBlT"><img src="https://s4.ax1x.com/2022/03/03/bJhBlT.png" alt="bJhBlT.png"></a></p><p>· 链接标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;网址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标网页的打开形式&quot;</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./目标文件.html&quot;</span>&gt;</span>文字描述<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>空连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bJh0pV"><img src="https://s4.ax1x.com/2022/03/03/bJh0pV.png" alt="bJh0pV.png"></a></p><p>· 无序列表标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>无序包裹<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>无序每一行<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;<span class="comment">/*去掉列表的符号*/</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bY7GqK"><img src="https://s4.ax1x.com/2022/03/03/bY7GqK.png" alt="bY7GqK.png"></a></p><p>· 有序列表标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>有序包裹<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>有序每一行<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bY76Z8"><img src="https://s4.ax1x.com/2022/03/03/bY76Z8.png" alt="bY76Z8.png"></a></p><p>· 自定义列表标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>自定义整体，包裹dt、dd<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>自定义列表的主题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>针对主题的每一项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bY7aPH"><img src="https://s4.ax1x.com/2022/03/03/bY7aPH.png" alt="bY7aPH.png"></a></p><p>· 表格标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>表格整体，包裹多个tr<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>表格每行,包裹td<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>表格单元格，包裹所以内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bY7NIe"><img src="https://s4.ax1x.com/2022/03/03/bY7NIe.png" alt="bY7NIe.png"></a></p><p>· 表格标题和表头单元格标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>整体大标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>表格第一行<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bY73Kx"><img src="https://s4.ax1x.com/2022/03/03/bY73Kx.png" alt="bY73Kx.png"></a></p><p>· 表格的结构标签：</p><p><a href="https://imgtu.com/i/bY7YVO"><img src="https://s4.ax1x.com/2022/03/03/bY7YVO.png" alt="bY7YVO.png"></a></p><p>· 合并单元格：不能跨结构合并</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rowspan</span>&gt;</span>跨行合并<span class="tag">&lt;/<span class="name">rowspan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">colspan</span>&gt;</span>跨列合并<span class="tag">&lt;/<span class="name">colspan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bY7dGd"><img src="https://s4.ax1x.com/2022/03/03/bY7dGd.png" alt="bY7dGd.png"></a></p><p>· 表单标签：</p><p>​    · 表单域标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span>包括在input里，对重置才有效<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    · input标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入框提示字&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bY70xI"><img src="https://s4.ax1x.com/2022/03/03/bY70xI.png" alt="bY70xI.png"></a></p><p><a href="https://imgtu.com/i/bY7wRA"><img src="https://s4.ax1x.com/2022/03/03/bY7wRA.png" alt="bY7wRA.png"></a></p><p><a href="https://imgtu.com/i/bY7DMt"><img src="https://s4.ax1x.com/2022/03/03/bY7DMt.png" alt="bY7DMt.png"></a></p><p><a href="https://imgtu.com/i/bY7rsP"><img src="https://s4.ax1x.com/2022/03/03/bY7rsP.png" alt="bY7rsP.png"></a></p><p>​    · button按钮标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">botton</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/btiT3t"><img src="https://s4.ax1x.com/2022/03/03/btiT3t.png" alt="btiT3t.png"></a></p><p>· select下拉菜单标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected(默认选中)&quot;</span>&gt;</span>菜单名<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>· text area文本域标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;宽&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;行数&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>· label标签：</p><p><a href="https://imgtu.com/i/bti54A"><img src="https://s4.ax1x.com/2022/03/03/bti54A.png" alt="bti54A.png"></a></p><p>· 没有语义的布局标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>一整块大盒子</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>一小段</span><br></pre></td></tr></table></figure><p>· 有语义的布局标签：（H5手机端网页）</p><p><a href="https://imgtu.com/i/bti4Nd"><img src="https://s4.ax1x.com/2022/03/03/bti4Nd.png" alt="bti4Nd.png"></a></p><p>· 字符实体：</p><p>HTML中的空格合并现象</p><p><a href="https://imgtu.com/i/btio9I"><img src="https://s4.ax1x.com/2022/03/03/btio9I.png" alt="btio9I.png"></a></p><h3 id="CSS："><a href="#CSS：" class="headerlink" title="CSS："></a>CSS：</h3><p>· 语法规则：写在style标签中，style标签一般在head标签里，title标签下面</p><p>· /* css注释 */</p><p>· p{选择器里设置样式}</p><p>· 引入方式：内嵌式（写在head里,style标签中），外嵌式（单独写在.css文件里），行内式（写在style属性中，配合js使用）</p><p>· 基础选择器：</p><p>   · 标签选择器（选中所有的这个标签都生效css）：标签名{css属性名：属性值；}<br>    · 类选择器：.类名{css属性名：属性值；}</p><p><a href="https://imgtu.com/i/btihAH"><img src="https://s4.ax1x.com/2022/03/03/btihAH.png" alt="btihAH.png"></a></p><p>​    · id选择器：#id属性值{css属性名：属性值；}</p><p><a href="https://imgtu.com/i/bti7gP"><img src="https://s4.ax1x.com/2022/03/03/bti7gP.png" alt="bti7gP.png"></a></p><p>​    · 通配符选择器：*{css属性名：属性值；}</p><p><a href="https://imgtu.com/i/btiHjf"><img src="https://s4.ax1x.com/2022/03/03/btiHjf.png" alt="btiHjf.png"></a></p><h1 id="2022-3-4"><a href="#2022-3-4" class="headerlink" title="2022.3.4"></a>2022.3.4</h1><p>· 字体大小：<em><strong>font-size：数字px;</strong></em> (默认16)</p><p>· 字体粗细：<em><strong>font-weight：bold/700/nomal/400;</strong></em></p><p>· 字体倾斜：<em><strong>font-style：italic;</strong></em></p><p>·字体：***font-family：宋体;***（默认微软雅黑,如果用户没有安装微软雅黑，就用黑体显示，如果也没有黑体，就按任意一种非衬线字体系列显示)-》无衬线字体（sans-serif)，衬线字体(serif)，等宽字体（monnspace)</p><p>· 样式层叠问题：如果给同一个标签设置了相同的属性，此时样式会层叠（覆盖），写在最下面的会生效。</p><p>· 字体font相关属性（复合属性）连写：<strong>font:style weight size family;</strong>(每个值用空格隔开)</p><p>​        如果想要单独设置，则单独下在下面；如果想要省略，只能省前俩个。</p><p>· 文本缩进：<em><strong>text-indent：数字px/2em(俩字大小）;</strong></em></p><p>· 文本水平对齐方式：***text-align:left/center/right;***图也可以用</p><p><a href="https://imgtu.com/i/bagx6f"><img src="https://s4.ax1x.com/2022/03/04/bagx6f.png" alt="bagx6f.png"></a></p><p>· 文本修饰：***text-decoration:none;***清除a标签默认的下划线</p><p><a href="https://imgtu.com/i/bagv1P"><img src="https://s4.ax1x.com/2022/03/04/bagv1P.png" alt="bagv1P.png"></a></p><p>· 行高：<em><strong>line-height:数字px/倍数（当前标签font-size的倍数）；</strong></em></p><p><a href="https://imgtu.com/i/ba290g"><img src="https://s4.ax1x.com/2022/03/04/ba290g.png" alt="ba290g.png"></a></p><p>· 谷歌调试工具：右键检查；F12elements;删除线部分不生效；字号上下方向键可调节；tab键可增加样式；√可选择可取消样式</p><p><a href="https://imgtu.com/i/bagzX8"><img src="https://s4.ax1x.com/2022/03/04/bagzX8.png" alt="bagzX8.png"></a></p><p>** <strong>选择器进阶</strong> **</p><p>· 后代选择器：选择器1空格选择器2{css}</p><p><a href="https://imgtu.com/i/ba2pnS"><img src="https://s4.ax1x.com/2022/03/04/ba2pnS.png" alt="ba2pnS.png"></a></p><p>· 子代选择器：选择器1&gt;选择器2{css}</p><p><a href="https://imgtu.com/i/ba2C7Q"><img src="https://s4.ax1x.com/2022/03/04/ba2C7Q.png" alt="ba2C7Q.png"></a></p><p>· 并集选择器：选择器1，选择器2{css}</p><p><a href="https://imgtu.com/i/ba2ikj"><img src="https://s4.ax1x.com/2022/03/04/ba2ikj.png" alt="ba2ikj.png"></a></p><p>· 交集选择器：选择器1选择器2{css}</p><p>[url=<a href="https://imgtu.com/i/ba2Fts][img]https://s4.ax1x.com/2022/03/04/ba2Fts.md.png[/img][/url]">https://imgtu.com/i/ba2Fts][img]https://s4.ax1x.com/2022/03/04/ba2Fts.md.png[/img][/url]</a></p><p>· hover伪类选择器：hover{css}  任何标签都可以加</p><p><a href="https://imgtu.com/i/ba2khn"><img src="https://s4.ax1x.com/2022/03/04/ba2khn.png" alt="ba2khn.png"></a></p><p>· emmet语法：编译器插件，简写即可快速生成</p><p><a href="https://imgtu.com/i/ba2Epq"><img src="https://s4.ax1x.com/2022/03/04/ba2Epq.png" alt="ba2Epq.png"></a></p><h2 id="2022-3-5"><a href="#2022-3-5" class="headerlink" title="2022.3.5"></a>2022.3.5</h2><p>· 背景颜色：<em><strong>background-color:颜色英文名/RGB/RGBA(透明色);</strong></em></p><p>· 背景图片：<em><strong>background-image:url(‘图片的路径’);</strong></em>  会自动填充</p><p>· 背景平铺：<em><strong>background-repeat:no-repeat；</strong></em></p><p><a href="https://imgtu.com/i/bB3E3d"><img src="https://s1.ax1x.com/2022/03/06/bB3E3d.png" alt="bB3E3d.png"></a></p><p>· 背景位置：<em><strong>background-position:水平位置空格垂直位置；</strong></em></p><p><a href="https://imgtu.com/i/bB3mut"><img src="https://s1.ax1x.com/2022/03/06/bB3mut.png" alt="bB3mut.png"></a></p><p>· 背景相关属性连写：<em><strong>backbround:color image repeat position;</strong></em>(空格隔开英文单词可颠倒顺序，数值不可)</p><p><a href="https://imgtu.com/i/bB3ZjI"><img src="https://s1.ax1x.com/2022/03/06/bB3ZjI.png" alt="bB3ZjI.png"></a></p><p>· <u>img和背景图的区别：前者展示重要的图，后者展示不重要的</u></p><p>· 块级元素：独占一行，宽度默认是父级的100%，高度默认由内容撑开，可以设置宽高</p><p><a href="https://imgtu.com/i/bB3A9H"><img src="https://s1.ax1x.com/2022/03/06/bB3A9H.png" alt="bB3A9H.png"></a></p><p>· 行内元素：一行可以显示多个，宽度和高度都由内容撑开，不可以设置宽高</p><p><a href="https://imgtu.com/i/bB3F4e"><img src="https://s1.ax1x.com/2022/03/06/bB3F4e.png" alt="bB3F4e.png"></a></p><p>· 行内块元素：一行可以显示多个，可以设置宽高</p><p><a href="https://imgtu.com/i/bB3VgA"><img src="https://s1.ax1x.com/2022/03/06/bB3VgA.png" alt="bB3VgA.png"></a></p><p>· 显示模式（以上三种）转换：</p><p><a href="https://imgtu.com/i/bB3nDP"><img src="https://s1.ax1x.com/2022/03/06/bB3nDP.png" alt="bB3nDP.png"></a></p><p>· <u>标签嵌套问题：</u><a href="https://imgtu.com/i/bB3uHf"><img src="https://s1.ax1x.com/2022/03/06/bB3uHf.png" alt="bB3uHf.png"></a></p><p>· css的特性：<strong>继承性：子承父业</strong></p><p>控制文字的属性都能继承，不是控制文字的属性不能继承</p><p><a href="https://imgtu.com/i/bB3ME8"><img src="https://s1.ax1x.com/2022/03/06/bB3ME8.png" alt="bB3ME8.png"></a><a href="https://imgtu.com/i/bB3QUS"><img src="https://s1.ax1x.com/2022/03/06/bB3QUS.png" alt="bB3QUS.png"></a></p><p>​                        <strong>层叠性：后面的覆盖前面的</strong></p><p><a href="https://imgtu.com/i/bB33CQ"><img src="https://s1.ax1x.com/2022/03/06/bB33CQ.png" alt="bB33CQ.png"></a></p><p>​                        <strong>优先级：优先级高的选择器会覆盖低的</strong></p><p><a href="https://imgtu.com/i/bB3l4g"><img src="https://s1.ax1x.com/2022/03/06/bB3l4g.png" alt="bB3l4g.png"></a></p><p><em>权重叠加计算：个数多权重大优先级最大</em></p><pre><code>                  · *！important最高，继承最低*</code></pre><p>​                        · <em>标签选择器选择一类</em></p><p>​                        · <em>权重叠加每位不存在进制</em></p><p>​                        · <em>权重相同此时比较层叠性</em></p><p>​                        · <em>都是继承，继承里谁最高，看继承哪个父级，哪个父级高，哪个选择器生效</em></p><p><a href="https://imgtu.com/i/bB3Ggs"><img src="https://s1.ax1x.com/2022/03/06/bB3Ggs.png" alt="bB3Ggs.png"></a></p><p>· 谷歌浏览器排错</p><p><a href="https://imgtu.com/i/bB3Jvn"><img src="https://s1.ax1x.com/2022/03/06/bB3Jvn.png" alt="bB3Jvn.png"></a></p><p>· 盒子模型：<strong>内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）</strong></p><p>​    –》内容的宽高：利用<strong>width</strong>和<strong>height</strong>属性默认设置是盒子<strong>内容区域</strong>的大小，即width/height:数字px;</p><p>​    –》边框区域（连写形式）：<strong>border:10px空格实线solid/虚线dashed/点线dotted空格；</strong>  部分先后顺序</p><p>​    –》边框-单方向设置：<strong>border-left/right/top/bottom：同上；</strong></p><p>​    –》边框-单个属性：</p><p><a href="https://imgtu.com/i/bB383j"><img src="https://s1.ax1x.com/2022/03/06/bB383j.png" alt="bB383j.png"></a></p><p>​    –》盒子尺寸=width or height+边框线（盒子被border、padding撑大了，要减去边框大小）</p><h2 id="2020-3-6"><a href="#2020-3-6" class="headerlink" title="2020.3.6"></a>2020.3.6</h2><p>· 布局思路：从外到内，先宽高背景色，放内容，调节内容的位置；控制文字细节</p><p><a href="https://imgtu.com/i/bDz9z9"><img src="https://s1.ax1x.com/2022/03/06/bDz9z9.png" alt="bDz9z9.png"></a></p><p>​    –》内边距：<strong>padding:数字；（其属性可以当作复合属性使用，表示单独设置某个方向的内边距，最多可取4个值）4上 右 下 左/3上 左右 下/2上下 左右 （顺时针，遇到没有看对面）</strong> 宽度可设置为0，灵活性更高</p><p>· css3多写一行代码，即可实现自动去减（内减模式）</p><p><a href="https://imgtu.com/i/bDzis1"><img src="https://s1.ax1x.com/2022/03/06/bDzis1.png" alt="bDzis1.png"></a></p><p>​    –》外边距：<strong>margin:数字；</strong>其余同上</p><p>①合并现象问题：避免就好</p><p><a href="https://imgtu.com/i/bDzpRJ"><img src="https://s1.ax1x.com/2022/03/06/bDzpRJ.png" alt="bDzpRJ.png"></a></p><p>②塌陷现象问题：给父元素设置overflow:hidden;</p><p><a href="https://imgtu.com/i/bDzFqx"><img src="https://s1.ax1x.com/2022/03/06/bDzFqx.png" alt="bDzFqx.png"></a></p><p>③行内元素的内外边距的问题：</p><p><a href="https://imgtu.com/i/bDzVIO"><img src="https://s1.ax1x.com/2022/03/06/bDzVIO.png" alt="bDzVIO.png"></a></p><p>​    –》清除默认的内外边距：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bDzPMR"><img src="https://s1.ax1x.com/2022/03/06/bDzPMR.png" alt="bDzPMR.png"></a></p><p>· 版心（网页的有效内容）居中：<strong>margin:0 auto;</strong></p><p>· 结构伪类选择器：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">nth-child(n)&#123;&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bDznRH"><img src="https://s1.ax1x.com/2022/03/06/bDznRH.png" alt="bDznRH.png"></a></p><p><a href="https://imgtu.com/i/bDzmJe"><img src="https://s1.ax1x.com/2022/03/06/bDzmJe.png" alt="bDzmJe.png"></a></p><p>· 伪元素：通过css创建标签，装饰性的不重要的小图；找父级，在这个父级里创建子级标签；</p><p><a href="https://imgtu.com/i/bDzuzd"><img src="https://s1.ax1x.com/2022/03/06/bDzuzd.png" alt="bDzuzd.png"></a></p><p>· 标准流：默认的标签排列规则</p><p><a href="https://imgtu.com/i/bDzMQA"><img src="https://s1.ax1x.com/2022/03/06/bDzMQA.png" alt="bDzMQA.png"></a></p><p><u>行内块问题：浏览器解析行内块或行内标签的时候，如果标签换行写会产生一个空格的间距。</u></p><p>· 浮动： <strong>图文环绕：float:left/right;</strong></p><p>​    特点：标签顶对齐；浮动在一行排列，宽高生效，浮动后的标签具备行内块特点</p><p><a href="https://imgtu.com/i/bDzQsI"><img src="https://s1.ax1x.com/2022/03/06/bDzQsI.png" alt="bDzQsI.png"></a></p><p>如果父级的宽度不够，子级会自动换行</p><h2 id="2022-3-7"><a href="#2022-3-7" class="headerlink" title="2022.3.7"></a>2022.3.7</h2><p>· css书写顺序：浏览器执行效率高</p><p>​    1.浮动（display）</p><p>​    2.盒子模型：maegin,border,padding,宽度高度背景色</p><p>​    3.文字样式</p><p>· 清除浮动：父子级标签，子级浮动，父级没有高度，后面的标准流盒子会受影响</p><p>，显示到上面的位置</p><p><a href="https://imgtu.com/i/b6VFh9"><img src="https://s1.ax1x.com/2022/03/07/b6VFh9.png" alt="b6VFh9.png"></a></p><p>​    -》》解决方法：①直接设置父元素的高度</p><p>​                                ②额外标签法：在父元素内容的最后添加一个块级元素,<strong>设置clear:both；清除俩测对浮动的影响</strong>(缺点：使网页变得复杂)</p><p>​                                ③单伪元素清除法：</p><p><a href="https://imgtu.com/i/b6VE11"><img src="https://s1.ax1x.com/2022/03/07/b6VE11.png" alt="b6VE11.png"></a></p><p>​                                ④双伪元素清除法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>(作用：解决外边距塌陷问题-》父子标签，都是块级，子级加了<span class="attribute">margin</span>会影响父级的位置）,<span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                            ⑤给父级设置overflow:hidden;</p><h2 id="2022-3-8"><a href="#2022-3-8" class="headerlink" title="2022.3.8"></a>2022.3.8</h2><p>做学成在线项目工程</p><h2 id="2022-3-9"><a href="#2022-3-9" class="headerlink" title="2022.3.9"></a>2022.3.9</h2><p>总结回顾：css书写：1.定位/浮动/display；2.盒子模型；3.文字属性</p><p><a href="https://imgtu.com/i/bWWZB8"><img src="https://s1.ax1x.com/2022/03/09/bWWZB8.png" alt="bWWZB8.png"></a></p><p>· 定位：<em>如果left和right都有，以left为准；top和bottom都有，以top为准</em></p><p><a href="https://imgtu.com/i/bWW3j0"><img src="https://s1.ax1x.com/2022/03/09/bWW3j0.png" alt="bWW3j0.png"></a></p><p>​    -》》相对定位：①占有原来的位置；②仍然具有标签原有的显示模式特点；③改变位置参照自己原来的位置</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>:relative;</span><br><span class="line"><span class="attribute">left</span>/<span class="attribute">right</span>/<span class="attribute">top</span>/<span class="attribute">bottom</span>:数字px/数字%;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bWWAjP"><img src="https://s1.ax1x.com/2022/03/09/bWWAjP.png" alt="bWWAjP.png"></a></p><p>​    -》》绝对定位：先找到定位的父级，如果有这样的父级就以这个父级为参照物进行定位；有父级，但父级没有定位，以浏览器窗口为参照物进行定位。特点：①脱标不占位置；②改变标签的显示模式特点：具体行内块特点（在一行共存，宽高生效）</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>:absolute;</span><br><span class="line"><span class="attribute">left</span>/<span class="attribute">right</span>/<span class="attribute">top</span>/<span class="attribute">bottom</span>:数字px;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bWWVnf"><img src="https://s1.ax1x.com/2022/03/09/bWWVnf.png" alt="bWWVnf.png"></a></p><p><strong>子绝父相：父级相对定位，子级绝对定位</strong></p><p><strong>绝对定位查找父级的方式：就近找定位的父级，如果逐层查找找不到这样的父级，就以浏览器窗口为参照进行定位</strong></p><h2 id="2022-3-10"><a href="#2022-3-10" class="headerlink" title="2022.3.10"></a>2022.3.10</h2><p>· 定位-绝对定位居中：（不能使用margin auto居中）<strong>left：50%，</strong>整个盒子移动到浏览器中间偏右的位置；<strong>margin-left：-150px</strong>，把盒子向左侧移动：自己宽度的一半</p><p>· 定位-位移居中：自己宽度高度的一半.</p><p>​                    <strong>transform:translate(-50%,-50%);</strong></p><p>· 固定定位：①脱标，不占位置</p><p>​                    ②改变位置参考浏览器窗口</p><p>​                    ③具备行内块特点</p><p>​                    ④没有尺寸，也要有内容</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>:fixed;</span><br><span class="line"><span class="attribute">left</span>/<span class="attribute">right</span>/<span class="attribute">top</span>/<span class="attribute">bottom</span>:数字px;</span><br></pre></td></tr></table></figure><p>· 定位-显示图层：默认情况下，定位的盒子，后来者居上；</p><p>​                <strong>z-index:整数；</strong>取值越大，显示顺序越考上，z-index的默认值为0；<em>必须配合定位才生效</em></p><p>· 装饰-垂直对齐方式：浏览器遇到行内和行内块标签当作文字处理，默认文字是按基线对齐。</p><p><a href="https://imgtu.com/i/b4c9u6"><img src="https://s1.ax1x.com/2022/03/10/b4c9u6.png" alt="b4c9u6.png"></a></p><p><strong>①vertical-align:middle;/display:block;转换</strong></p><p><strong>②图片垂直居中：加一个行高再加一个vertical-align:middle;图片水平居中：在前面的基础上加一个text-align:center;</strong></p><p>· 光标类型：</p><p><a href="https://imgtu.com/i/b4cPHO"><img src="https://s1.ax1x.com/2022/03/10/b4cPHO.png" alt="b4cPHO.png"></a></p><p>· 边框圆角：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:<span class="number">4</span>左上 右上 右下 左下;/<span class="number">3</span>左上 右上左下 右下;/<span class="number">2</span>左上右下 右上左下;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/b4cCDK"><img src="https://s1.ax1x.com/2022/03/10/b4cCDK.png" alt="b4cCDK.png"></a></p><p>· 边框圆型（正方形）：取盒子尺寸的一半</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br></pre></td></tr></table></figure><p>· 胶囊按钮（长方形）：取值是高度的一半</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:高度/<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>· 溢出部分显示效果：auto(根据内容是否超出，判断是否显示滚动条)；scroll：无论内容是否超出都显示滚动条</p><p><a href="https://imgtu.com/i/b46zg1"><img src="https://s1.ax1x.com/2022/03/10/b46zg1.png" alt="b46zg1.png"></a></p><p>· 元素本身隐藏：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">visibility</span>:hidden;占位隐藏，不重要</span><br><span class="line"><span class="attribute">display</span>:none;不占位的隐藏，重要的</span><br></pre></td></tr></table></figure><p>· 元素的整体透明度：</p><p><a href="https://imgtu.com/i/b4cSjx"><img src="https://s1.ax1x.com/2022/03/10/b4cSjx.png" alt="b4cSjx.png"></a></p><p>· 精灵图：</p><p><a href="https://imgtu.com/i/b4cFED"><img src="https://s1.ax1x.com/2022/03/10/b4cFED.png" alt="b4cFED.png"></a></p><p><a href="https://imgtu.com/i/b4cVCd"><img src="https://s1.ax1x.com/2022/03/10/b4cVCd.png" alt="b4cVCd.png"></a></p><p><a href="https://imgtu.com/i/b4cmvt"><img src="https://s1.ax1x.com/2022/03/10/b4cmvt.png" alt="b4cmvt.png"></a></p><p>· 背景图缩放：</p><p><a href="https://imgtu.com/i/b4ckUe"><img src="https://s1.ax1x.com/2022/03/10/b4ckUe.png" alt="b4ckUe.png"></a></p><p><a href="https://imgtu.com/i/b4cA4H"><img src="https://s1.ax1x.com/2022/03/10/b4cA4H.png" alt="b4cA4H.png"></a></p><p>· 盒子阴影：</p><p><a href="https://imgtu.com/i/b4cZ8A"><img src="https://s1.ax1x.com/2022/03/10/b4cZ8A.png" alt="b4cZ8A.png"></a></p><p>· 过渡：都是配合着hover使用，谁变化谁加过度属性；如果变化的属性多，直接写all，表示所有。</p><p><a href="https://imgtu.com/i/b4cuKP"><img src="https://s1.ax1x.com/2022/03/10/b4cuKP.png" alt="b4cuKP.png"></a></p><p>· html骨架：</p><p><a href="https://imgtu.com/i/b4cKDf"><img src="https://s1.ax1x.com/2022/03/10/b4cKDf.png" alt="b4cKDf.png"></a></p><p>· <strong>SEO</strong>:搜素引擎优化；作用：让网站在搜素引擎的排名靠前</p><p>-》》SEO三大标签：title（网页标题标签）、description（网页描述标签）、keywords（网页关键词标签）</p><p>-》》ico图标设置：图标放在根目录里</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;shortcut <span class="attribute">icon</span>&quot; href=&quot;ico图标路径&quot; type=&quot;image/x-<span class="attribute">icon</span>&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="2022-3-11"><a href="#2022-3-11" class="headerlink" title="2022.3.11"></a>2022.3.11</h2><p>小兔鲜儿电商首页项目</p>]]></content>
      
      
      <categories>
          
          <category> html、css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html、css、 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo+Butterfly搭建个人博客教程</title>
      <link href="/2021/12/31/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-1/"/>
      <url>/2021/12/31/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-1/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><pre><code>发现CSDN复制粘贴太严重了，所以选择自己搭建一个博客，前前后后，断断续续，参照了很多的教程，花了一个月的时间，还有很多不足的地方，后续还会继续改进。</code></pre><h2 id="以下内容视频教程：https-www-bilibili-com-video-BV1mU4y1j72n-share-source-copy-web"><a href="#以下内容视频教程：https-www-bilibili-com-video-BV1mU4y1j72n-share-source-copy-web" class="headerlink" title="以下内容视频教程：https://www.bilibili.com/video/BV1mU4y1j72n?share_source=copy_web"></a>以下内容视频教程：<a href="https://www.bilibili.com/video/BV1mU4y1j72n?share_source=copy_web">https://www.bilibili.com/video/BV1mU4y1j72n?share_source=copy_web</a></h2><h1 id="Node-js安装与环境配置"><a href="#Node-js安装与环境配置" class="headerlink" title="Node.js安装与环境配置"></a>Node.js安装与环境配置</h1><p>相关教程：<a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">https://www.cnblogs.com/liuqiyun/p/8133904.html</a><br>关于配置过程出现的问题：<br>    1.win+R 打开cmd管理员命令窗口不可执行，可以点左下角的菜单键，右键后点Windows PowerShell管理员运行。<br>    <a href="https://imgtu.com/i/Txs66P"><img src="https://s4.ax1x.com/2022/01/06/Txs66P.png" alt="Txs66P.png"></a></p><p>2.更改缓存路径失败，可以更改文件夹node_global和文件夹node_cache的用户权限，右键属性，允许所有权限。<br><a href="https://imgtu.com/i/TxscOf"><img src="https://s4.ax1x.com/2022/01/06/TxscOf.png" alt="TxscOf.png"></a><br>3.验证更改缓存路径是否成功命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config get prefix</span><br><span class="line">npm config get cache</span><br></pre></td></tr></table></figure><p>4.配置淘宝镜像，加快下载相关插件速度：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>若配置失败（报错），用以下命令检测：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config get proxy</span><br><span class="line">npm config get https-proxy</span><br></pre></td></tr></table></figure><p>若返回值不为null，则执行以下命令（返回值为null则不用执行）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set proxy null</span><br><span class="line">npm config set https-proxy null</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry http://registry.cnpmjs.org/</span><br></pre></td></tr></table></figure><p>再次执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h1 id="Git安装与配置"><a href="#Git安装与配置" class="headerlink" title="Git安装与配置"></a>Git安装与配置</h1><p>相关教程：<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p><h1 id="Hexo下载"><a href="#Hexo下载" class="headerlink" title="Hexo下载"></a>Hexo下载</h1><p>在Git Bash里输入命令下载：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>然后验证是否下载成功，其输入版本号：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h1 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h1><p>在GitHub上注册，并创建一个空的仓库。</p><p>博客地址：用户名.github.io</p><h1 id="生成SSH-keys"><a href="#生成SSH-keys" class="headerlink" title="生成SSH keys"></a>生成SSH keys</h1><p>打开Git Bush，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh</span><br><span class="line">ssh-keygen -t rsa -C &quot;github上绑的邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>不管其输出啥，输入四次回车即可。</p><p>然后在C盘-&gt;用户-&gt;A..-&gt;.ssh-&gt;找到一个名为id_rsa.pub文件-&gt;用编译器打开-&gt;复制粘贴到github设置里的SSH密钥里。</p><p>测试是否成功生成：</p><p>在Git Bush里输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>其输出里带你的用户名即成功。</p><h1 id="本地生成博客内容："><a href="#本地生成博客内容：" class="headerlink" title="本地生成博客内容："></a>本地生成博客内容：</h1><p>①在安装目录的同一根目录下新建文件夹，用来存放博客相关文件。</p><p>②打开文件夹，Git Bush输入命令，初始化hexo：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>初始化成功会看到文件夹不为空。</p><p>③常用安装命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install +安装必备组件命令</span><br></pre></td></tr></table></figure><p>④生成静态网页：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>⑤打开本地服务器预览：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>将<a href="https://localhost:4000/%E5%8F%B3%E9%94%AEcopy%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E9%A2%84%E8%A7%88%E3%80%82%E4%B8%8D%E5%8F%AF%E7%94%A8win%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%89%93%E5%BC%80%E3%80%82">https://localhost:4000/右键copy到浏览器打开预览。不可用win快捷键打开。</a></p><p>⑥安装配置包：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>⑦上传本地文件到GitHub：（需验证个人账号密码）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h1 id="Butterfly美化个人博客："><a href="#Butterfly美化个人博客：" class="headerlink" title="Butterfly美化个人博客："></a>Butterfly美化个人博客：</h1><p>官方教程：<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p><p>相关视频教程：<a href="https://www.bilibili.com/video/BV1aV411p7Bc?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1aV411p7Bc?spm_id_from=333.999.0.0</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo、GitHub、butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些水题</title>
      <link href="/2021/12/25/%E4%B8%80%E4%BA%9B%E6%B0%B4%E9%A2%98/"/>
      <url>/2021/12/25/%E4%B8%80%E4%BA%9B%E6%B0%B4%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="判断三角形"><a href="#判断三角形" class="headerlink" title="判断三角形"></a>判断三角形</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f%f%f&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a+b&gt;c &amp;&amp; a+c&gt;b &amp;&amp; b+c&gt;a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a==b &amp;&amp; a==c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;等边三角形\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a==b ||a==c || b==c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;等腰三角形\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;直角三角形\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a==b ||a==c || b==c || a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)</span><br><span class="line">                &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;等腰直角三角形\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;一般三角形\n&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不是三角形\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="埃及数"><a href="#埃及数" class="headerlink" title="埃及数"></a>埃及数</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> a,b,c;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;/&quot;</span>;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line"> <span class="keyword">if</span>(a==<span class="number">1</span>||b%a==<span class="number">0</span>)</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1/&quot;</span>&lt;&lt;b/a;</span><br><span class="line"> <span class="keyword">while</span>(a!=<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  c=b/a+<span class="number">1</span>;</span><br><span class="line">  a=a*c-b;</span><br><span class="line">  b=b*c;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1/&quot;</span>&lt;&lt;c;</span><br><span class="line">  <span class="keyword">if</span>(a&gt;<span class="number">1</span>)</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;+&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(a==<span class="number">1</span>||b%a==<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1/&quot;</span>&lt;&lt;b/a;</span><br><span class="line">   a=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数星星"><a href="#数星星" class="headerlink" title="数星星"></a>数星星</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,c=<span class="number">1</span>,count;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">       <span class="keyword">if</span>(c &gt; <span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//相邻两行之间输出一个空行</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;     <span class="comment">//输入没次输入的单词数</span></span><br><span class="line">        count = <span class="number">0</span>;      <span class="comment">//计数器，记录输入了多少个star</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">            <span class="keyword">if</span>(str == <span class="string">&quot;star&quot;</span>) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case&quot;</span>&lt;&lt;c++&lt;&lt;<span class="string">&quot;:This list contains &quot;</span>&lt;&lt;count&lt;&lt;<span class="string">&quot; star.&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/16/hello-world/"/>
      <url>/2021/12/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
